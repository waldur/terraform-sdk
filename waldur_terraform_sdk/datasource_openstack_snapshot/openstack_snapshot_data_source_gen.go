// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_openstack_snapshot

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OpenstackSnapshotDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"access_url": schema.StringAttribute{
				Computed: true,
			},
			"action": schema.StringAttribute{
				Computed: true,
			},
			"backend_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Snapshot ID in the OpenStack backend",
				MarkdownDescription: "Snapshot ID in the OpenStack backend",
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"customer": schema.StringAttribute{
				Computed: true,
			},
			"customer_abbreviation": schema.StringAttribute{
				Computed: true,
			},
			"customer_name": schema.StringAttribute{
				Computed: true,
			},
			"customer_native_name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_traceback": schema.StringAttribute{
				Computed: true,
			},
			"field": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"is_limit_based": schema.BoolAttribute{
				Computed: true,
			},
			"is_usage_based": schema.BoolAttribute{
				Computed: true,
			},
			"kept_until": schema.StringAttribute{
				Computed:            true,
				Description:         "Guaranteed time of snapshot retention. If null - keep forever.",
				MarkdownDescription: "Guaranteed time of snapshot retention. If null - keep forever.",
			},
			"marketplace_category_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_category_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_state": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"modified": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"project": schema.StringAttribute{
				Computed: true,
			},
			"project_name": schema.StringAttribute{
				Computed: true,
			},
			"project_uuid": schema.StringAttribute{
				Computed: true,
			},
			"resource_type": schema.StringAttribute{
				Computed: true,
			},
			"restorations": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "New volume description.",
							MarkdownDescription: "New volume description.",
						},
						"uuid": schema.StringAttribute{
							Computed: true,
						},
						"volume": schema.StringAttribute{
							Computed:            true,
							Description:         "Volume that is being restored from the snapshot",
							MarkdownDescription: "Volume that is being restored from the snapshot",
						},
						"volume_device": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of volume as instance device e.g. /dev/vdb.",
							MarkdownDescription: "Name of volume as instance device e.g. /dev/vdb.",
						},
						"volume_name": schema.StringAttribute{
							Computed: true,
						},
						"volume_runtime_state": schema.StringAttribute{
							Computed: true,
						},
						"volume_size": schema.Int64Attribute{
							Computed:            true,
							Description:         "Size in MiB",
							MarkdownDescription: "Size in MiB",
						},
						"volume_state": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: RestorationsType{
						ObjectType: types.ObjectType{
							AttrTypes: RestorationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"runtime_state": schema.StringAttribute{
				Computed: true,
			},
			"service_name": schema.StringAttribute{
				Computed: true,
			},
			"service_settings": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_error_message": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_state": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_uuid": schema.StringAttribute{
				Computed: true,
			},
			"size": schema.Int64Attribute{
				Computed:            true,
				Description:         "Size in MiB",
				MarkdownDescription: "Size in MiB",
			},
			"source_volume": schema.StringAttribute{
				Computed:            true,
				Description:         "Volume from which this snapshot was created",
				MarkdownDescription: "Volume from which this snapshot was created",
			},
			"source_volume_marketplace_uuid": schema.StringAttribute{
				Computed: true,
			},
			"source_volume_name": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OpenstackSnapshotModel struct {
	AccessUrl                   types.String `tfsdk:"access_url"`
	Action                      types.String `tfsdk:"action"`
	BackendId                   types.String `tfsdk:"backend_id"`
	Created                     types.String `tfsdk:"created"`
	Customer                    types.String `tfsdk:"customer"`
	CustomerAbbreviation        types.String `tfsdk:"customer_abbreviation"`
	CustomerName                types.String `tfsdk:"customer_name"`
	CustomerNativeName          types.String `tfsdk:"customer_native_name"`
	Description                 types.String `tfsdk:"description"`
	ErrorMessage                types.String `tfsdk:"error_message"`
	ErrorTraceback              types.String `tfsdk:"error_traceback"`
	Field                       types.List   `tfsdk:"field"`
	IsLimitBased                types.Bool   `tfsdk:"is_limit_based"`
	IsUsageBased                types.Bool   `tfsdk:"is_usage_based"`
	KeptUntil                   types.String `tfsdk:"kept_until"`
	MarketplaceCategoryName     types.String `tfsdk:"marketplace_category_name"`
	MarketplaceCategoryUuid     types.String `tfsdk:"marketplace_category_uuid"`
	MarketplaceOfferingName     types.String `tfsdk:"marketplace_offering_name"`
	MarketplaceOfferingUuid     types.String `tfsdk:"marketplace_offering_uuid"`
	MarketplacePlanUuid         types.String `tfsdk:"marketplace_plan_uuid"`
	MarketplaceResourceState    types.String `tfsdk:"marketplace_resource_state"`
	MarketplaceResourceUuid     types.String `tfsdk:"marketplace_resource_uuid"`
	Modified                    types.String `tfsdk:"modified"`
	Name                        types.String `tfsdk:"name"`
	Project                     types.String `tfsdk:"project"`
	ProjectName                 types.String `tfsdk:"project_name"`
	ProjectUuid                 types.String `tfsdk:"project_uuid"`
	ResourceType                types.String `tfsdk:"resource_type"`
	Restorations                types.List   `tfsdk:"restorations"`
	RuntimeState                types.String `tfsdk:"runtime_state"`
	ServiceName                 types.String `tfsdk:"service_name"`
	ServiceSettings             types.String `tfsdk:"service_settings"`
	ServiceSettingsErrorMessage types.String `tfsdk:"service_settings_error_message"`
	ServiceSettingsState        types.String `tfsdk:"service_settings_state"`
	ServiceSettingsUuid         types.String `tfsdk:"service_settings_uuid"`
	Size                        types.Int64  `tfsdk:"size"`
	SourceVolume                types.String `tfsdk:"source_volume"`
	SourceVolumeMarketplaceUuid types.String `tfsdk:"source_volume_marketplace_uuid"`
	SourceVolumeName            types.String `tfsdk:"source_volume_name"`
	State                       types.String `tfsdk:"state"`
	Url                         types.String `tfsdk:"url"`
	Uuid                        types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = RestorationsType{}

type RestorationsType struct {
	basetypes.ObjectType
}

func (t RestorationsType) Equal(o attr.Type) bool {
	other, ok := o.(RestorationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RestorationsType) String() string {
	return "RestorationsType"
}

func (t RestorationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return nil, diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	volumeAttribute, ok := attributes["volume"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume is missing from object`)

		return nil, diags
	}

	volumeVal, ok := volumeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume expected to be basetypes.StringValue, was: %T`, volumeAttribute))
	}

	volumeDeviceAttribute, ok := attributes["volume_device"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_device is missing from object`)

		return nil, diags
	}

	volumeDeviceVal, ok := volumeDeviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_device expected to be basetypes.StringValue, was: %T`, volumeDeviceAttribute))
	}

	volumeNameAttribute, ok := attributes["volume_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_name is missing from object`)

		return nil, diags
	}

	volumeNameVal, ok := volumeNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_name expected to be basetypes.StringValue, was: %T`, volumeNameAttribute))
	}

	volumeRuntimeStateAttribute, ok := attributes["volume_runtime_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_runtime_state is missing from object`)

		return nil, diags
	}

	volumeRuntimeStateVal, ok := volumeRuntimeStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_runtime_state expected to be basetypes.StringValue, was: %T`, volumeRuntimeStateAttribute))
	}

	volumeSizeAttribute, ok := attributes["volume_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_size is missing from object`)

		return nil, diags
	}

	volumeSizeVal, ok := volumeSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_size expected to be basetypes.Int64Value, was: %T`, volumeSizeAttribute))
	}

	volumeStateAttribute, ok := attributes["volume_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_state is missing from object`)

		return nil, diags
	}

	volumeStateVal, ok := volumeStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_state expected to be basetypes.StringValue, was: %T`, volumeStateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RestorationsValue{
		Created:            createdVal,
		Description:        descriptionVal,
		Uuid:               uuidVal,
		Volume:             volumeVal,
		VolumeDevice:       volumeDeviceVal,
		VolumeName:         volumeNameVal,
		VolumeRuntimeState: volumeRuntimeStateVal,
		VolumeSize:         volumeSizeVal,
		VolumeState:        volumeStateVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewRestorationsValueNull() RestorationsValue {
	return RestorationsValue{
		state: attr.ValueStateNull,
	}
}

func NewRestorationsValueUnknown() RestorationsValue {
	return RestorationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRestorationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RestorationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RestorationsValue Attribute Value",
				"While creating a RestorationsValue value, a missing attribute value was detected. "+
					"A RestorationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RestorationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RestorationsValue Attribute Type",
				"While creating a RestorationsValue value, an invalid attribute value was detected. "+
					"A RestorationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RestorationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RestorationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RestorationsValue Attribute Value",
				"While creating a RestorationsValue value, an extra attribute value was detected. "+
					"A RestorationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RestorationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRestorationsValueUnknown(), diags
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	volumeAttribute, ok := attributes["volume"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeVal, ok := volumeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume expected to be basetypes.StringValue, was: %T`, volumeAttribute))
	}

	volumeDeviceAttribute, ok := attributes["volume_device"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_device is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeDeviceVal, ok := volumeDeviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_device expected to be basetypes.StringValue, was: %T`, volumeDeviceAttribute))
	}

	volumeNameAttribute, ok := attributes["volume_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_name is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeNameVal, ok := volumeNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_name expected to be basetypes.StringValue, was: %T`, volumeNameAttribute))
	}

	volumeRuntimeStateAttribute, ok := attributes["volume_runtime_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_runtime_state is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeRuntimeStateVal, ok := volumeRuntimeStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_runtime_state expected to be basetypes.StringValue, was: %T`, volumeRuntimeStateAttribute))
	}

	volumeSizeAttribute, ok := attributes["volume_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_size is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeSizeVal, ok := volumeSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_size expected to be basetypes.Int64Value, was: %T`, volumeSizeAttribute))
	}

	volumeStateAttribute, ok := attributes["volume_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_state is missing from object`)

		return NewRestorationsValueUnknown(), diags
	}

	volumeStateVal, ok := volumeStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_state expected to be basetypes.StringValue, was: %T`, volumeStateAttribute))
	}

	if diags.HasError() {
		return NewRestorationsValueUnknown(), diags
	}

	return RestorationsValue{
		Created:            createdVal,
		Description:        descriptionVal,
		Uuid:               uuidVal,
		Volume:             volumeVal,
		VolumeDevice:       volumeDeviceVal,
		VolumeName:         volumeNameVal,
		VolumeRuntimeState: volumeRuntimeStateVal,
		VolumeSize:         volumeSizeVal,
		VolumeState:        volumeStateVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewRestorationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RestorationsValue {
	object, diags := NewRestorationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRestorationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RestorationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRestorationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRestorationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRestorationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRestorationsValueMust(RestorationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RestorationsType) ValueType(ctx context.Context) attr.Value {
	return RestorationsValue{}
}

var _ basetypes.ObjectValuable = RestorationsValue{}

type RestorationsValue struct {
	Created            basetypes.StringValue `tfsdk:"created"`
	Description        basetypes.StringValue `tfsdk:"description"`
	Uuid               basetypes.StringValue `tfsdk:"uuid"`
	Volume             basetypes.StringValue `tfsdk:"volume"`
	VolumeDevice       basetypes.StringValue `tfsdk:"volume_device"`
	VolumeName         basetypes.StringValue `tfsdk:"volume_name"`
	VolumeRuntimeState basetypes.StringValue `tfsdk:"volume_runtime_state"`
	VolumeSize         basetypes.Int64Value  `tfsdk:"volume_size"`
	VolumeState        basetypes.StringValue `tfsdk:"volume_state"`
	state              attr.ValueState
}

func (v RestorationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["created"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_device"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_runtime_state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["volume_state"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.Created.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		val, err = v.Volume.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume"] = val

		val, err = v.VolumeDevice.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_device"] = val

		val, err = v.VolumeName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_name"] = val

		val, err = v.VolumeRuntimeState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_runtime_state"] = val

		val, err = v.VolumeSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_size"] = val

		val, err = v.VolumeState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_state"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RestorationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RestorationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RestorationsValue) String() string {
	return "RestorationsValue"
}

func (v RestorationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created":              basetypes.StringType{},
		"description":          basetypes.StringType{},
		"uuid":                 basetypes.StringType{},
		"volume":               basetypes.StringType{},
		"volume_device":        basetypes.StringType{},
		"volume_name":          basetypes.StringType{},
		"volume_runtime_state": basetypes.StringType{},
		"volume_size":          basetypes.Int64Type{},
		"volume_state":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created":              v.Created,
			"description":          v.Description,
			"uuid":                 v.Uuid,
			"volume":               v.Volume,
			"volume_device":        v.VolumeDevice,
			"volume_name":          v.VolumeName,
			"volume_runtime_state": v.VolumeRuntimeState,
			"volume_size":          v.VolumeSize,
			"volume_state":         v.VolumeState,
		})

	return objVal, diags
}

func (v RestorationsValue) Equal(o attr.Value) bool {
	other, ok := o.(RestorationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Created.Equal(other.Created) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	if !v.Volume.Equal(other.Volume) {
		return false
	}

	if !v.VolumeDevice.Equal(other.VolumeDevice) {
		return false
	}

	if !v.VolumeName.Equal(other.VolumeName) {
		return false
	}

	if !v.VolumeRuntimeState.Equal(other.VolumeRuntimeState) {
		return false
	}

	if !v.VolumeSize.Equal(other.VolumeSize) {
		return false
	}

	if !v.VolumeState.Equal(other.VolumeState) {
		return false
	}

	return true
}

func (v RestorationsValue) Type(ctx context.Context) attr.Type {
	return RestorationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RestorationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created":              basetypes.StringType{},
		"description":          basetypes.StringType{},
		"uuid":                 basetypes.StringType{},
		"volume":               basetypes.StringType{},
		"volume_device":        basetypes.StringType{},
		"volume_name":          basetypes.StringType{},
		"volume_runtime_state": basetypes.StringType{},
		"volume_size":          basetypes.Int64Type{},
		"volume_state":         basetypes.StringType{},
	}
}
