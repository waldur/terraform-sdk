// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_order

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrderResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"accepting_terms_of_service": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"activation_price": schema.Float64Attribute{
				Computed: true,
			},
			"attachment": schema.StringAttribute{
				Computed: true,
			},
			"backend_id": schema.StringAttribute{
				Computed: true,
			},
			"callback_url": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(200),
				},
			},
			"can_terminate": schema.BoolAttribute{
				Computed: true,
			},
			"category_icon": schema.StringAttribute{
				Computed: true,
			},
			"category_title": schema.StringAttribute{
				Computed: true,
			},
			"category_uuid": schema.StringAttribute{
				Computed: true,
			},
			"completed_at": schema.StringAttribute{
				Computed: true,
			},
			"consumer_reviewed_at": schema.StringAttribute{
				Computed: true,
			},
			"consumer_reviewed_by": schema.StringAttribute{
				Computed:            true,
				Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
				MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
			},
			"consumer_reviewed_by_full_name": schema.StringAttribute{
				Computed: true,
			},
			"consumer_reviewed_by_username": schema.StringAttribute{
				Computed:            true,
				Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
				MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
			},
			"cost": schema.StringAttribute{
				Computed: true,
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"created_by": schema.StringAttribute{
				Computed: true,
			},
			"created_by_civil_number": schema.StringAttribute{
				Computed: true,
			},
			"created_by_full_name": schema.StringAttribute{
				Computed: true,
			},
			"created_by_username": schema.StringAttribute{
				Computed:            true,
				Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
				MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
			},
			"customer_name": schema.StringAttribute{
				Computed: true,
			},
			"customer_slug": schema.StringAttribute{
				Computed: true,
			},
			"customer_uuid": schema.StringAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_traceback": schema.StringAttribute{
				Computed: true,
			},
			"field": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"fixed_price": schema.Float64Attribute{
				Computed: true,
			},
			"issue": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"key": schema.StringAttribute{
						Computed: true,
					},
					"uuid": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: IssueType{
					ObjectType: types.ObjectType{
						AttrTypes: IssueValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"limits": schema.MapAttribute{
				ElementType: types.Int64Type,
				Optional:    true,
				Computed:    true,
			},
			"marketplace_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"modified": schema.StringAttribute{
				Computed: true,
			},
			"new_cost_estimate": schema.StringAttribute{
				Computed: true,
			},
			"new_plan_name": schema.StringAttribute{
				Computed: true,
			},
			"new_plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"offering": schema.StringAttribute{
				Required: true,
			},
			"offering_billable": schema.BoolAttribute{
				Computed:            true,
				Description:         "Purchase and usage is invoiced.",
				MarkdownDescription: "Purchase and usage is invoiced.",
			},
			"offering_description": schema.StringAttribute{
				Computed: true,
			},
			"offering_image": schema.StringAttribute{
				Computed: true,
			},
			"offering_name": schema.StringAttribute{
				Computed: true,
			},
			"offering_shared": schema.BoolAttribute{
				Computed:            true,
				Description:         "Accessible to all customers.",
				MarkdownDescription: "Accessible to all customers.",
			},
			"offering_thumbnail": schema.StringAttribute{
				Computed: true,
			},
			"offering_type": schema.StringAttribute{
				Computed: true,
			},
			"offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"old_cost_estimate": schema.StringAttribute{
				Computed: true,
			},
			"old_plan_name": schema.StringAttribute{
				Computed: true,
			},
			"old_plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"output": schema.StringAttribute{
				Computed: true,
			},
			"plan": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"plan_description": schema.StringAttribute{
				Computed: true,
			},
			"plan_name": schema.StringAttribute{
				Computed: true,
			},
			"plan_unit": schema.StringAttribute{
				Computed: true,
			},
			"plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"project": schema.StringAttribute{
				Required: true,
			},
			"project_description": schema.StringAttribute{
				Computed: true,
			},
			"project_name": schema.StringAttribute{
				Computed: true,
			},
			"project_slug": schema.StringAttribute{
				Computed: true,
			},
			"project_uuid": schema.StringAttribute{
				Computed: true,
			},
			"provider_name": schema.StringAttribute{
				Computed: true,
			},
			"provider_reviewed_at": schema.StringAttribute{
				Computed: true,
			},
			"provider_reviewed_by": schema.StringAttribute{
				Computed:            true,
				Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
				MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
			},
			"provider_reviewed_by_full_name": schema.StringAttribute{
				Computed: true,
			},
			"provider_reviewed_by_username": schema.StringAttribute{
				Computed:            true,
				Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
				MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
			},
			"provider_uuid": schema.StringAttribute{
				Computed: true,
			},
			"request_comment": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(255),
				},
			},
			"resource_name": schema.StringAttribute{
				Computed: true,
			},
			"resource_type": schema.StringAttribute{
				Computed: true,
			},
			"resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"termination_comment": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Create",
						"Update",
						"Terminate",
					),
				},
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type OrderModel struct {
	AcceptingTermsOfService    types.Bool    `tfsdk:"accepting_terms_of_service"`
	ActivationPrice            types.Float64 `tfsdk:"activation_price"`
	Attachment                 types.String  `tfsdk:"attachment"`
	BackendId                  types.String  `tfsdk:"backend_id"`
	CallbackUrl                types.String  `tfsdk:"callback_url"`
	CanTerminate               types.Bool    `tfsdk:"can_terminate"`
	CategoryIcon               types.String  `tfsdk:"category_icon"`
	CategoryTitle              types.String  `tfsdk:"category_title"`
	CategoryUuid               types.String  `tfsdk:"category_uuid"`
	CompletedAt                types.String  `tfsdk:"completed_at"`
	ConsumerReviewedAt         types.String  `tfsdk:"consumer_reviewed_at"`
	ConsumerReviewedBy         types.String  `tfsdk:"consumer_reviewed_by"`
	ConsumerReviewedByFullName types.String  `tfsdk:"consumer_reviewed_by_full_name"`
	ConsumerReviewedByUsername types.String  `tfsdk:"consumer_reviewed_by_username"`
	Cost                       types.String  `tfsdk:"cost"`
	Created                    types.String  `tfsdk:"created"`
	CreatedBy                  types.String  `tfsdk:"created_by"`
	CreatedByCivilNumber       types.String  `tfsdk:"created_by_civil_number"`
	CreatedByFullName          types.String  `tfsdk:"created_by_full_name"`
	CreatedByUsername          types.String  `tfsdk:"created_by_username"`
	CustomerName               types.String  `tfsdk:"customer_name"`
	CustomerSlug               types.String  `tfsdk:"customer_slug"`
	CustomerUuid               types.String  `tfsdk:"customer_uuid"`
	ErrorMessage               types.String  `tfsdk:"error_message"`
	ErrorTraceback             types.String  `tfsdk:"error_traceback"`
	Field                      types.List    `tfsdk:"field"`
	FixedPrice                 types.Float64 `tfsdk:"fixed_price"`
	Issue                      IssueValue    `tfsdk:"issue"`
	Limits                     types.Map     `tfsdk:"limits"`
	MarketplaceResourceUuid    types.String  `tfsdk:"marketplace_resource_uuid"`
	Modified                   types.String  `tfsdk:"modified"`
	NewCostEstimate            types.String  `tfsdk:"new_cost_estimate"`
	NewPlanName                types.String  `tfsdk:"new_plan_name"`
	NewPlanUuid                types.String  `tfsdk:"new_plan_uuid"`
	Offering                   types.String  `tfsdk:"offering"`
	OfferingBillable           types.Bool    `tfsdk:"offering_billable"`
	OfferingDescription        types.String  `tfsdk:"offering_description"`
	OfferingImage              types.String  `tfsdk:"offering_image"`
	OfferingName               types.String  `tfsdk:"offering_name"`
	OfferingShared             types.Bool    `tfsdk:"offering_shared"`
	OfferingThumbnail          types.String  `tfsdk:"offering_thumbnail"`
	OfferingType               types.String  `tfsdk:"offering_type"`
	OfferingUuid               types.String  `tfsdk:"offering_uuid"`
	OldCostEstimate            types.String  `tfsdk:"old_cost_estimate"`
	OldPlanName                types.String  `tfsdk:"old_plan_name"`
	OldPlanUuid                types.String  `tfsdk:"old_plan_uuid"`
	Output                     types.String  `tfsdk:"output"`
	Plan                       types.String  `tfsdk:"plan"`
	PlanDescription            types.String  `tfsdk:"plan_description"`
	PlanName                   types.String  `tfsdk:"plan_name"`
	PlanUnit                   types.String  `tfsdk:"plan_unit"`
	PlanUuid                   types.String  `tfsdk:"plan_uuid"`
	Project                    types.String  `tfsdk:"project"`
	ProjectDescription         types.String  `tfsdk:"project_description"`
	ProjectName                types.String  `tfsdk:"project_name"`
	ProjectSlug                types.String  `tfsdk:"project_slug"`
	ProjectUuid                types.String  `tfsdk:"project_uuid"`
	ProviderName               types.String  `tfsdk:"provider_name"`
	ProviderReviewedAt         types.String  `tfsdk:"provider_reviewed_at"`
	ProviderReviewedBy         types.String  `tfsdk:"provider_reviewed_by"`
	ProviderReviewedByFullName types.String  `tfsdk:"provider_reviewed_by_full_name"`
	ProviderReviewedByUsername types.String  `tfsdk:"provider_reviewed_by_username"`
	ProviderUuid               types.String  `tfsdk:"provider_uuid"`
	RequestComment             types.String  `tfsdk:"request_comment"`
	ResourceName               types.String  `tfsdk:"resource_name"`
	ResourceType               types.String  `tfsdk:"resource_type"`
	ResourceUuid               types.String  `tfsdk:"resource_uuid"`
	State                      types.String  `tfsdk:"state"`
	TerminationComment         types.String  `tfsdk:"termination_comment"`
	Type                       types.String  `tfsdk:"type"`
	Url                        types.String  `tfsdk:"url"`
	Uuid                       types.String  `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = IssueType{}

type IssueType struct {
	basetypes.ObjectType
}

func (t IssueType) Equal(o attr.Type) bool {
	other, ok := o.(IssueType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IssueType) String() string {
	return "IssueType"
}

func (t IssueType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IssueValue{
		Key:   keyVal,
		Uuid:  uuidVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewIssueValueNull() IssueValue {
	return IssueValue{
		state: attr.ValueStateNull,
	}
}

func NewIssueValueUnknown() IssueValue {
	return IssueValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIssueValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IssueValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IssueValue Attribute Value",
				"While creating a IssueValue value, a missing attribute value was detected. "+
					"A IssueValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IssueValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IssueValue Attribute Type",
				"While creating a IssueValue value, an invalid attribute value was detected. "+
					"A IssueValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IssueValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IssueValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IssueValue Attribute Value",
				"While creating a IssueValue value, an extra attribute value was detected. "+
					"A IssueValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IssueValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIssueValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewIssueValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewIssueValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewIssueValueUnknown(), diags
	}

	return IssueValue{
		Key:   keyVal,
		Uuid:  uuidVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewIssueValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IssueValue {
	object, diags := NewIssueValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIssueValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IssueType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIssueValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIssueValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIssueValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIssueValueMust(IssueValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IssueType) ValueType(ctx context.Context) attr.Value {
	return IssueValue{}
}

var _ basetypes.ObjectValuable = IssueValue{}

type IssueValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Uuid  basetypes.StringValue `tfsdk:"uuid"`
	state attr.ValueState
}

func (v IssueValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IssueValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IssueValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IssueValue) String() string {
	return "IssueValue"
}

func (v IssueValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":  basetypes.StringType{},
		"uuid": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":  v.Key,
			"uuid": v.Uuid,
		})

	return objVal, diags
}

func (v IssueValue) Equal(o attr.Value) bool {
	other, ok := o.(IssueValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v IssueValue) Type(ctx context.Context) attr.Type {
	return IssueType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IssueValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":  basetypes.StringType{},
		"uuid": basetypes.StringType{},
	}
}
