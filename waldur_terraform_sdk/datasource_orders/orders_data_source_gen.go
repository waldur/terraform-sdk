// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_orders

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrdersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"can_approve_as_consumer": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"can_approve_as_provider": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"category_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"created": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Created after",
				MarkdownDescription: "Created after",
			},
			"customer_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"field": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"modified": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Modified after",
				MarkdownDescription: "Modified after",
			},
			"o": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Ordering\n\n",
				MarkdownDescription: "Ordering\n\n",
			},
			"offering": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"offering_slug": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Multiple values may be separated by commas.",
				MarkdownDescription: "Multiple values may be separated by commas.",
			},
			"offering_type": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"offering_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"orders": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"activation_price": schema.Float64Attribute{
							Computed: true,
						},
						"attachment": schema.StringAttribute{
							Computed: true,
						},
						"backend_id": schema.StringAttribute{
							Computed: true,
						},
						"callback_url": schema.StringAttribute{
							Computed: true,
						},
						"can_terminate": schema.BoolAttribute{
							Computed: true,
						},
						"category_icon": schema.StringAttribute{
							Computed: true,
						},
						"category_title": schema.StringAttribute{
							Computed: true,
						},
						"category_uuid": schema.StringAttribute{
							Computed: true,
						},
						"completed_at": schema.StringAttribute{
							Computed: true,
						},
						"consumer_reviewed_at": schema.StringAttribute{
							Computed: true,
						},
						"consumer_reviewed_by": schema.StringAttribute{
							Computed:            true,
							Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
							MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
						},
						"consumer_reviewed_by_full_name": schema.StringAttribute{
							Computed: true,
						},
						"consumer_reviewed_by_username": schema.StringAttribute{
							Computed:            true,
							Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
							MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
						},
						"cost": schema.StringAttribute{
							Computed: true,
						},
						"created": schema.StringAttribute{
							Computed: true,
						},
						"created_by_civil_number": schema.StringAttribute{
							Computed: true,
						},
						"created_by_full_name": schema.StringAttribute{
							Computed: true,
						},
						"created_by_username": schema.StringAttribute{
							Computed:            true,
							Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
							MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
						},
						"customer_name": schema.StringAttribute{
							Computed: true,
						},
						"customer_slug": schema.StringAttribute{
							Computed: true,
						},
						"customer_uuid": schema.StringAttribute{
							Computed: true,
						},
						"error_message": schema.StringAttribute{
							Computed: true,
						},
						"error_traceback": schema.StringAttribute{
							Computed: true,
						},
						"fixed_price": schema.Float64Attribute{
							Computed: true,
						},
						"issue": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Computed: true,
								},
								"uuid": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: IssueType{
								ObjectType: types.ObjectType{
									AttrTypes: IssueValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"limits": schema.MapAttribute{
							ElementType: types.Int64Type,
							Computed:    true,
						},
						"marketplace_resource_uuid": schema.StringAttribute{
							Computed: true,
						},
						"modified": schema.StringAttribute{
							Computed: true,
						},
						"new_cost_estimate": schema.StringAttribute{
							Computed: true,
						},
						"new_plan_name": schema.StringAttribute{
							Computed: true,
						},
						"new_plan_uuid": schema.StringAttribute{
							Computed: true,
						},
						"offering": schema.StringAttribute{
							Computed: true,
						},
						"offering_billable": schema.BoolAttribute{
							Computed:            true,
							Description:         "Purchase and usage is invoiced.",
							MarkdownDescription: "Purchase and usage is invoiced.",
						},
						"offering_description": schema.StringAttribute{
							Computed: true,
						},
						"offering_image": schema.StringAttribute{
							Computed: true,
						},
						"offering_name": schema.StringAttribute{
							Computed: true,
						},
						"offering_shared": schema.BoolAttribute{
							Computed:            true,
							Description:         "Accessible to all customers.",
							MarkdownDescription: "Accessible to all customers.",
						},
						"offering_thumbnail": schema.StringAttribute{
							Computed: true,
						},
						"offering_type": schema.StringAttribute{
							Computed: true,
						},
						"offering_uuid": schema.StringAttribute{
							Computed: true,
						},
						"old_cost_estimate": schema.StringAttribute{
							Computed: true,
						},
						"old_plan_name": schema.StringAttribute{
							Computed: true,
						},
						"old_plan_uuid": schema.StringAttribute{
							Computed: true,
						},
						"output": schema.StringAttribute{
							Computed: true,
						},
						"plan": schema.StringAttribute{
							Computed: true,
						},
						"plan_description": schema.StringAttribute{
							Computed: true,
						},
						"plan_name": schema.StringAttribute{
							Computed: true,
						},
						"plan_unit": schema.StringAttribute{
							Computed: true,
						},
						"plan_uuid": schema.StringAttribute{
							Computed: true,
						},
						"project_description": schema.StringAttribute{
							Computed: true,
						},
						"project_name": schema.StringAttribute{
							Computed: true,
						},
						"project_slug": schema.StringAttribute{
							Computed: true,
						},
						"project_uuid": schema.StringAttribute{
							Computed: true,
						},
						"provider_name": schema.StringAttribute{
							Computed: true,
						},
						"provider_reviewed_at": schema.StringAttribute{
							Computed: true,
						},
						"provider_reviewed_by": schema.StringAttribute{
							Computed:            true,
							Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
							MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
						},
						"provider_reviewed_by_full_name": schema.StringAttribute{
							Computed: true,
						},
						"provider_reviewed_by_username": schema.StringAttribute{
							Computed:            true,
							Description:         "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
							MarkdownDescription: "Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters",
						},
						"provider_uuid": schema.StringAttribute{
							Computed: true,
						},
						"request_comment": schema.StringAttribute{
							Computed: true,
						},
						"resource_name": schema.StringAttribute{
							Computed: true,
						},
						"resource_type": schema.StringAttribute{
							Computed: true,
						},
						"resource_uuid": schema.StringAttribute{
							Computed: true,
						},
						"state": schema.StringAttribute{
							Computed: true,
						},
						"termination_comment": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
						"uuid": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: OrdersType{
						ObjectType: types.ObjectType{
							AttrTypes: OrdersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"page": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "A page number within the paginated result set.",
				MarkdownDescription: "A page number within the paginated result set.",
			},
			"page_size": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of results to return per page.",
				MarkdownDescription: "Number of results to return per page.",
			},
			"parent_offering_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"project_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"provider_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"query": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Search by order UUID, project name or resource name",
				MarkdownDescription: "Search by order UUID, project name or resource name",
			},
			"resource": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"resource_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"service_manager_uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"state": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"type": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
		},
	}
}

type OrdersModel struct {
	CanApproveAsConsumer types.Bool   `tfsdk:"can_approve_as_consumer"`
	CanApproveAsProvider types.Bool   `tfsdk:"can_approve_as_provider"`
	CategoryUuid         types.String `tfsdk:"category_uuid"`
	Created              types.String `tfsdk:"created"`
	CustomerUuid         types.String `tfsdk:"customer_uuid"`
	Field                types.List   `tfsdk:"field"`
	Modified             types.String `tfsdk:"modified"`
	O                    types.List   `tfsdk:"o"`
	Offering             types.String `tfsdk:"offering"`
	OfferingSlug         types.List   `tfsdk:"offering_slug"`
	OfferingType         types.List   `tfsdk:"offering_type"`
	OfferingUuid         types.String `tfsdk:"offering_uuid"`
	Orders               types.Set    `tfsdk:"orders"`
	Page                 types.Int64  `tfsdk:"page"`
	PageSize             types.Int64  `tfsdk:"page_size"`
	ParentOfferingUuid   types.String `tfsdk:"parent_offering_uuid"`
	ProjectUuid          types.String `tfsdk:"project_uuid"`
	ProviderUuid         types.String `tfsdk:"provider_uuid"`
	Query                types.String `tfsdk:"query"`
	Resource             types.String `tfsdk:"resource"`
	ResourceUuid         types.String `tfsdk:"resource_uuid"`
	ServiceManagerUuid   types.String `tfsdk:"service_manager_uuid"`
	State                types.List   `tfsdk:"state"`
	Type                 types.List   `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = OrdersType{}

type OrdersType struct {
	basetypes.ObjectType
}

func (t OrdersType) Equal(o attr.Type) bool {
	other, ok := o.(OrdersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrdersType) String() string {
	return "OrdersType"
}

func (t OrdersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	activationPriceAttribute, ok := attributes["activation_price"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`activation_price is missing from object`)

		return nil, diags
	}

	activationPriceVal, ok := activationPriceAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`activation_price expected to be basetypes.Float64Value, was: %T`, activationPriceAttribute))
	}

	attachmentAttribute, ok := attributes["attachment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attachment is missing from object`)

		return nil, diags
	}

	attachmentVal, ok := attachmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attachment expected to be basetypes.StringValue, was: %T`, attachmentAttribute))
	}

	backendIdAttribute, ok := attributes["backend_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backend_id is missing from object`)

		return nil, diags
	}

	backendIdVal, ok := backendIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backend_id expected to be basetypes.StringValue, was: %T`, backendIdAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return nil, diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	canTerminateAttribute, ok := attributes["can_terminate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`can_terminate is missing from object`)

		return nil, diags
	}

	canTerminateVal, ok := canTerminateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`can_terminate expected to be basetypes.BoolValue, was: %T`, canTerminateAttribute))
	}

	categoryIconAttribute, ok := attributes["category_icon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_icon is missing from object`)

		return nil, diags
	}

	categoryIconVal, ok := categoryIconAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_icon expected to be basetypes.StringValue, was: %T`, categoryIconAttribute))
	}

	categoryTitleAttribute, ok := attributes["category_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_title is missing from object`)

		return nil, diags
	}

	categoryTitleVal, ok := categoryTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_title expected to be basetypes.StringValue, was: %T`, categoryTitleAttribute))
	}

	categoryUuidAttribute, ok := attributes["category_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_uuid is missing from object`)

		return nil, diags
	}

	categoryUuidVal, ok := categoryUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_uuid expected to be basetypes.StringValue, was: %T`, categoryUuidAttribute))
	}

	completedAtAttribute, ok := attributes["completed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completed_at is missing from object`)

		return nil, diags
	}

	completedAtVal, ok := completedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completed_at expected to be basetypes.StringValue, was: %T`, completedAtAttribute))
	}

	consumerReviewedAtAttribute, ok := attributes["consumer_reviewed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_at is missing from object`)

		return nil, diags
	}

	consumerReviewedAtVal, ok := consumerReviewedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_at expected to be basetypes.StringValue, was: %T`, consumerReviewedAtAttribute))
	}

	consumerReviewedByAttribute, ok := attributes["consumer_reviewed_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by is missing from object`)

		return nil, diags
	}

	consumerReviewedByVal, ok := consumerReviewedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by expected to be basetypes.StringValue, was: %T`, consumerReviewedByAttribute))
	}

	consumerReviewedByFullNameAttribute, ok := attributes["consumer_reviewed_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by_full_name is missing from object`)

		return nil, diags
	}

	consumerReviewedByFullNameVal, ok := consumerReviewedByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by_full_name expected to be basetypes.StringValue, was: %T`, consumerReviewedByFullNameAttribute))
	}

	consumerReviewedByUsernameAttribute, ok := attributes["consumer_reviewed_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by_username is missing from object`)

		return nil, diags
	}

	consumerReviewedByUsernameVal, ok := consumerReviewedByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by_username expected to be basetypes.StringValue, was: %T`, consumerReviewedByUsernameAttribute))
	}

	costAttribute, ok := attributes["cost"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost is missing from object`)

		return nil, diags
	}

	costVal, ok := costAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost expected to be basetypes.StringValue, was: %T`, costAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return nil, diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	createdByCivilNumberAttribute, ok := attributes["created_by_civil_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_civil_number is missing from object`)

		return nil, diags
	}

	createdByCivilNumberVal, ok := createdByCivilNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_civil_number expected to be basetypes.StringValue, was: %T`, createdByCivilNumberAttribute))
	}

	createdByFullNameAttribute, ok := attributes["created_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_full_name is missing from object`)

		return nil, diags
	}

	createdByFullNameVal, ok := createdByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_full_name expected to be basetypes.StringValue, was: %T`, createdByFullNameAttribute))
	}

	createdByUsernameAttribute, ok := attributes["created_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_username is missing from object`)

		return nil, diags
	}

	createdByUsernameVal, ok := createdByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_username expected to be basetypes.StringValue, was: %T`, createdByUsernameAttribute))
	}

	customerNameAttribute, ok := attributes["customer_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_name is missing from object`)

		return nil, diags
	}

	customerNameVal, ok := customerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_name expected to be basetypes.StringValue, was: %T`, customerNameAttribute))
	}

	customerSlugAttribute, ok := attributes["customer_slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_slug is missing from object`)

		return nil, diags
	}

	customerSlugVal, ok := customerSlugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_slug expected to be basetypes.StringValue, was: %T`, customerSlugAttribute))
	}

	customerUuidAttribute, ok := attributes["customer_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_uuid is missing from object`)

		return nil, diags
	}

	customerUuidVal, ok := customerUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_uuid expected to be basetypes.StringValue, was: %T`, customerUuidAttribute))
	}

	errorMessageAttribute, ok := attributes["error_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message is missing from object`)

		return nil, diags
	}

	errorMessageVal, ok := errorMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message expected to be basetypes.StringValue, was: %T`, errorMessageAttribute))
	}

	errorTracebackAttribute, ok := attributes["error_traceback"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_traceback is missing from object`)

		return nil, diags
	}

	errorTracebackVal, ok := errorTracebackAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_traceback expected to be basetypes.StringValue, was: %T`, errorTracebackAttribute))
	}

	fixedPriceAttribute, ok := attributes["fixed_price"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_price is missing from object`)

		return nil, diags
	}

	fixedPriceVal, ok := fixedPriceAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_price expected to be basetypes.Float64Value, was: %T`, fixedPriceAttribute))
	}

	issueAttribute, ok := attributes["issue"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`issue is missing from object`)

		return nil, diags
	}

	issueVal, ok := issueAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`issue expected to be basetypes.ObjectValue, was: %T`, issueAttribute))
	}

	limitsAttribute, ok := attributes["limits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limits is missing from object`)

		return nil, diags
	}

	limitsVal, ok := limitsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limits expected to be basetypes.MapValue, was: %T`, limitsAttribute))
	}

	marketplaceResourceUuidAttribute, ok := attributes["marketplace_resource_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketplace_resource_uuid is missing from object`)

		return nil, diags
	}

	marketplaceResourceUuidVal, ok := marketplaceResourceUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketplace_resource_uuid expected to be basetypes.StringValue, was: %T`, marketplaceResourceUuidAttribute))
	}

	modifiedAttribute, ok := attributes["modified"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified is missing from object`)

		return nil, diags
	}

	modifiedVal, ok := modifiedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified expected to be basetypes.StringValue, was: %T`, modifiedAttribute))
	}

	newCostEstimateAttribute, ok := attributes["new_cost_estimate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_cost_estimate is missing from object`)

		return nil, diags
	}

	newCostEstimateVal, ok := newCostEstimateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_cost_estimate expected to be basetypes.StringValue, was: %T`, newCostEstimateAttribute))
	}

	newPlanNameAttribute, ok := attributes["new_plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_plan_name is missing from object`)

		return nil, diags
	}

	newPlanNameVal, ok := newPlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_plan_name expected to be basetypes.StringValue, was: %T`, newPlanNameAttribute))
	}

	newPlanUuidAttribute, ok := attributes["new_plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_plan_uuid is missing from object`)

		return nil, diags
	}

	newPlanUuidVal, ok := newPlanUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_plan_uuid expected to be basetypes.StringValue, was: %T`, newPlanUuidAttribute))
	}

	offeringAttribute, ok := attributes["offering"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering is missing from object`)

		return nil, diags
	}

	offeringVal, ok := offeringAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering expected to be basetypes.StringValue, was: %T`, offeringAttribute))
	}

	offeringBillableAttribute, ok := attributes["offering_billable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_billable is missing from object`)

		return nil, diags
	}

	offeringBillableVal, ok := offeringBillableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_billable expected to be basetypes.BoolValue, was: %T`, offeringBillableAttribute))
	}

	offeringDescriptionAttribute, ok := attributes["offering_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_description is missing from object`)

		return nil, diags
	}

	offeringDescriptionVal, ok := offeringDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_description expected to be basetypes.StringValue, was: %T`, offeringDescriptionAttribute))
	}

	offeringImageAttribute, ok := attributes["offering_image"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_image is missing from object`)

		return nil, diags
	}

	offeringImageVal, ok := offeringImageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_image expected to be basetypes.StringValue, was: %T`, offeringImageAttribute))
	}

	offeringNameAttribute, ok := attributes["offering_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_name is missing from object`)

		return nil, diags
	}

	offeringNameVal, ok := offeringNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_name expected to be basetypes.StringValue, was: %T`, offeringNameAttribute))
	}

	offeringSharedAttribute, ok := attributes["offering_shared"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_shared is missing from object`)

		return nil, diags
	}

	offeringSharedVal, ok := offeringSharedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_shared expected to be basetypes.BoolValue, was: %T`, offeringSharedAttribute))
	}

	offeringThumbnailAttribute, ok := attributes["offering_thumbnail"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_thumbnail is missing from object`)

		return nil, diags
	}

	offeringThumbnailVal, ok := offeringThumbnailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_thumbnail expected to be basetypes.StringValue, was: %T`, offeringThumbnailAttribute))
	}

	offeringTypeAttribute, ok := attributes["offering_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_type is missing from object`)

		return nil, diags
	}

	offeringTypeVal, ok := offeringTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_type expected to be basetypes.StringValue, was: %T`, offeringTypeAttribute))
	}

	offeringUuidAttribute, ok := attributes["offering_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_uuid is missing from object`)

		return nil, diags
	}

	offeringUuidVal, ok := offeringUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_uuid expected to be basetypes.StringValue, was: %T`, offeringUuidAttribute))
	}

	oldCostEstimateAttribute, ok := attributes["old_cost_estimate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_cost_estimate is missing from object`)

		return nil, diags
	}

	oldCostEstimateVal, ok := oldCostEstimateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_cost_estimate expected to be basetypes.StringValue, was: %T`, oldCostEstimateAttribute))
	}

	oldPlanNameAttribute, ok := attributes["old_plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_plan_name is missing from object`)

		return nil, diags
	}

	oldPlanNameVal, ok := oldPlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_plan_name expected to be basetypes.StringValue, was: %T`, oldPlanNameAttribute))
	}

	oldPlanUuidAttribute, ok := attributes["old_plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_plan_uuid is missing from object`)

		return nil, diags
	}

	oldPlanUuidVal, ok := oldPlanUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_plan_uuid expected to be basetypes.StringValue, was: %T`, oldPlanUuidAttribute))
	}

	outputAttribute, ok := attributes["output"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`output is missing from object`)

		return nil, diags
	}

	outputVal, ok := outputAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`output expected to be basetypes.StringValue, was: %T`, outputAttribute))
	}

	planAttribute, ok := attributes["plan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan is missing from object`)

		return nil, diags
	}

	planVal, ok := planAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan expected to be basetypes.StringValue, was: %T`, planAttribute))
	}

	planDescriptionAttribute, ok := attributes["plan_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_description is missing from object`)

		return nil, diags
	}

	planDescriptionVal, ok := planDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_description expected to be basetypes.StringValue, was: %T`, planDescriptionAttribute))
	}

	planNameAttribute, ok := attributes["plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_name is missing from object`)

		return nil, diags
	}

	planNameVal, ok := planNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_name expected to be basetypes.StringValue, was: %T`, planNameAttribute))
	}

	planUnitAttribute, ok := attributes["plan_unit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_unit is missing from object`)

		return nil, diags
	}

	planUnitVal, ok := planUnitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_unit expected to be basetypes.StringValue, was: %T`, planUnitAttribute))
	}

	planUuidAttribute, ok := attributes["plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_uuid is missing from object`)

		return nil, diags
	}

	planUuidVal, ok := planUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_uuid expected to be basetypes.StringValue, was: %T`, planUuidAttribute))
	}

	projectDescriptionAttribute, ok := attributes["project_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_description is missing from object`)

		return nil, diags
	}

	projectDescriptionVal, ok := projectDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_description expected to be basetypes.StringValue, was: %T`, projectDescriptionAttribute))
	}

	projectNameAttribute, ok := attributes["project_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_name is missing from object`)

		return nil, diags
	}

	projectNameVal, ok := projectNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_name expected to be basetypes.StringValue, was: %T`, projectNameAttribute))
	}

	projectSlugAttribute, ok := attributes["project_slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_slug is missing from object`)

		return nil, diags
	}

	projectSlugVal, ok := projectSlugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_slug expected to be basetypes.StringValue, was: %T`, projectSlugAttribute))
	}

	projectUuidAttribute, ok := attributes["project_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_uuid is missing from object`)

		return nil, diags
	}

	projectUuidVal, ok := projectUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_uuid expected to be basetypes.StringValue, was: %T`, projectUuidAttribute))
	}

	providerNameAttribute, ok := attributes["provider_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_name is missing from object`)

		return nil, diags
	}

	providerNameVal, ok := providerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_name expected to be basetypes.StringValue, was: %T`, providerNameAttribute))
	}

	providerReviewedAtAttribute, ok := attributes["provider_reviewed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_at is missing from object`)

		return nil, diags
	}

	providerReviewedAtVal, ok := providerReviewedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_at expected to be basetypes.StringValue, was: %T`, providerReviewedAtAttribute))
	}

	providerReviewedByAttribute, ok := attributes["provider_reviewed_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by is missing from object`)

		return nil, diags
	}

	providerReviewedByVal, ok := providerReviewedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by expected to be basetypes.StringValue, was: %T`, providerReviewedByAttribute))
	}

	providerReviewedByFullNameAttribute, ok := attributes["provider_reviewed_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by_full_name is missing from object`)

		return nil, diags
	}

	providerReviewedByFullNameVal, ok := providerReviewedByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by_full_name expected to be basetypes.StringValue, was: %T`, providerReviewedByFullNameAttribute))
	}

	providerReviewedByUsernameAttribute, ok := attributes["provider_reviewed_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by_username is missing from object`)

		return nil, diags
	}

	providerReviewedByUsernameVal, ok := providerReviewedByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by_username expected to be basetypes.StringValue, was: %T`, providerReviewedByUsernameAttribute))
	}

	providerUuidAttribute, ok := attributes["provider_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_uuid is missing from object`)

		return nil, diags
	}

	providerUuidVal, ok := providerUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_uuid expected to be basetypes.StringValue, was: %T`, providerUuidAttribute))
	}

	requestCommentAttribute, ok := attributes["request_comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`request_comment is missing from object`)

		return nil, diags
	}

	requestCommentVal, ok := requestCommentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`request_comment expected to be basetypes.StringValue, was: %T`, requestCommentAttribute))
	}

	resourceNameAttribute, ok := attributes["resource_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_name is missing from object`)

		return nil, diags
	}

	resourceNameVal, ok := resourceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_name expected to be basetypes.StringValue, was: %T`, resourceNameAttribute))
	}

	resourceTypeAttribute, ok := attributes["resource_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_type is missing from object`)

		return nil, diags
	}

	resourceTypeVal, ok := resourceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_type expected to be basetypes.StringValue, was: %T`, resourceTypeAttribute))
	}

	resourceUuidAttribute, ok := attributes["resource_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_uuid is missing from object`)

		return nil, diags
	}

	resourceUuidVal, ok := resourceUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_uuid expected to be basetypes.StringValue, was: %T`, resourceUuidAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	terminationCommentAttribute, ok := attributes["termination_comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`termination_comment is missing from object`)

		return nil, diags
	}

	terminationCommentVal, ok := terminationCommentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`termination_comment expected to be basetypes.StringValue, was: %T`, terminationCommentAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrdersValue{
		ActivationPrice:            activationPriceVal,
		Attachment:                 attachmentVal,
		BackendId:                  backendIdVal,
		CallbackUrl:                callbackUrlVal,
		CanTerminate:               canTerminateVal,
		CategoryIcon:               categoryIconVal,
		CategoryTitle:              categoryTitleVal,
		CategoryUuid:               categoryUuidVal,
		CompletedAt:                completedAtVal,
		ConsumerReviewedAt:         consumerReviewedAtVal,
		ConsumerReviewedBy:         consumerReviewedByVal,
		ConsumerReviewedByFullName: consumerReviewedByFullNameVal,
		ConsumerReviewedByUsername: consumerReviewedByUsernameVal,
		Cost:                       costVal,
		Created:                    createdVal,
		CreatedByCivilNumber:       createdByCivilNumberVal,
		CreatedByFullName:          createdByFullNameVal,
		CreatedByUsername:          createdByUsernameVal,
		CustomerName:               customerNameVal,
		CustomerSlug:               customerSlugVal,
		CustomerUuid:               customerUuidVal,
		ErrorMessage:               errorMessageVal,
		ErrorTraceback:             errorTracebackVal,
		FixedPrice:                 fixedPriceVal,
		Issue:                      issueVal,
		Limits:                     limitsVal,
		MarketplaceResourceUuid:    marketplaceResourceUuidVal,
		Modified:                   modifiedVal,
		NewCostEstimate:            newCostEstimateVal,
		NewPlanName:                newPlanNameVal,
		NewPlanUuid:                newPlanUuidVal,
		Offering:                   offeringVal,
		OfferingBillable:           offeringBillableVal,
		OfferingDescription:        offeringDescriptionVal,
		OfferingImage:              offeringImageVal,
		OfferingName:               offeringNameVal,
		OfferingShared:             offeringSharedVal,
		OfferingThumbnail:          offeringThumbnailVal,
		OfferingType:               offeringTypeVal,
		OfferingUuid:               offeringUuidVal,
		OldCostEstimate:            oldCostEstimateVal,
		OldPlanName:                oldPlanNameVal,
		OldPlanUuid:                oldPlanUuidVal,
		Output:                     outputVal,
		Plan:                       planVal,
		PlanDescription:            planDescriptionVal,
		PlanName:                   planNameVal,
		PlanUnit:                   planUnitVal,
		PlanUuid:                   planUuidVal,
		ProjectDescription:         projectDescriptionVal,
		ProjectName:                projectNameVal,
		ProjectSlug:                projectSlugVal,
		ProjectUuid:                projectUuidVal,
		ProviderName:               providerNameVal,
		ProviderReviewedAt:         providerReviewedAtVal,
		ProviderReviewedBy:         providerReviewedByVal,
		ProviderReviewedByFullName: providerReviewedByFullNameVal,
		ProviderReviewedByUsername: providerReviewedByUsernameVal,
		ProviderUuid:               providerUuidVal,
		RequestComment:             requestCommentVal,
		ResourceName:               resourceNameVal,
		ResourceType:               resourceTypeVal,
		ResourceUuid:               resourceUuidVal,
		State:                      stateVal,
		TerminationComment:         terminationCommentVal,
		OrdersType:                 typeVal,
		Uuid:                       uuidVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewOrdersValueNull() OrdersValue {
	return OrdersValue{
		state: attr.ValueStateNull,
	}
}

func NewOrdersValueUnknown() OrdersValue {
	return OrdersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrdersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrdersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrdersValue Attribute Value",
				"While creating a OrdersValue value, a missing attribute value was detected. "+
					"A OrdersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrdersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrdersValue Attribute Type",
				"While creating a OrdersValue value, an invalid attribute value was detected. "+
					"A OrdersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrdersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrdersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrdersValue Attribute Value",
				"While creating a OrdersValue value, an extra attribute value was detected. "+
					"A OrdersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrdersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrdersValueUnknown(), diags
	}

	activationPriceAttribute, ok := attributes["activation_price"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`activation_price is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	activationPriceVal, ok := activationPriceAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`activation_price expected to be basetypes.Float64Value, was: %T`, activationPriceAttribute))
	}

	attachmentAttribute, ok := attributes["attachment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attachment is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	attachmentVal, ok := attachmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attachment expected to be basetypes.StringValue, was: %T`, attachmentAttribute))
	}

	backendIdAttribute, ok := attributes["backend_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backend_id is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	backendIdVal, ok := backendIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backend_id expected to be basetypes.StringValue, was: %T`, backendIdAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	canTerminateAttribute, ok := attributes["can_terminate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`can_terminate is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	canTerminateVal, ok := canTerminateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`can_terminate expected to be basetypes.BoolValue, was: %T`, canTerminateAttribute))
	}

	categoryIconAttribute, ok := attributes["category_icon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_icon is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	categoryIconVal, ok := categoryIconAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_icon expected to be basetypes.StringValue, was: %T`, categoryIconAttribute))
	}

	categoryTitleAttribute, ok := attributes["category_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_title is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	categoryTitleVal, ok := categoryTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_title expected to be basetypes.StringValue, was: %T`, categoryTitleAttribute))
	}

	categoryUuidAttribute, ok := attributes["category_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	categoryUuidVal, ok := categoryUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category_uuid expected to be basetypes.StringValue, was: %T`, categoryUuidAttribute))
	}

	completedAtAttribute, ok := attributes["completed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`completed_at is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	completedAtVal, ok := completedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`completed_at expected to be basetypes.StringValue, was: %T`, completedAtAttribute))
	}

	consumerReviewedAtAttribute, ok := attributes["consumer_reviewed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_at is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	consumerReviewedAtVal, ok := consumerReviewedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_at expected to be basetypes.StringValue, was: %T`, consumerReviewedAtAttribute))
	}

	consumerReviewedByAttribute, ok := attributes["consumer_reviewed_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	consumerReviewedByVal, ok := consumerReviewedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by expected to be basetypes.StringValue, was: %T`, consumerReviewedByAttribute))
	}

	consumerReviewedByFullNameAttribute, ok := attributes["consumer_reviewed_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by_full_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	consumerReviewedByFullNameVal, ok := consumerReviewedByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by_full_name expected to be basetypes.StringValue, was: %T`, consumerReviewedByFullNameAttribute))
	}

	consumerReviewedByUsernameAttribute, ok := attributes["consumer_reviewed_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`consumer_reviewed_by_username is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	consumerReviewedByUsernameVal, ok := consumerReviewedByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`consumer_reviewed_by_username expected to be basetypes.StringValue, was: %T`, consumerReviewedByUsernameAttribute))
	}

	costAttribute, ok := attributes["cost"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	costVal, ok := costAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost expected to be basetypes.StringValue, was: %T`, costAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	createdByCivilNumberAttribute, ok := attributes["created_by_civil_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_civil_number is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	createdByCivilNumberVal, ok := createdByCivilNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_civil_number expected to be basetypes.StringValue, was: %T`, createdByCivilNumberAttribute))
	}

	createdByFullNameAttribute, ok := attributes["created_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_full_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	createdByFullNameVal, ok := createdByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_full_name expected to be basetypes.StringValue, was: %T`, createdByFullNameAttribute))
	}

	createdByUsernameAttribute, ok := attributes["created_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_username is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	createdByUsernameVal, ok := createdByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_username expected to be basetypes.StringValue, was: %T`, createdByUsernameAttribute))
	}

	customerNameAttribute, ok := attributes["customer_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	customerNameVal, ok := customerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_name expected to be basetypes.StringValue, was: %T`, customerNameAttribute))
	}

	customerSlugAttribute, ok := attributes["customer_slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_slug is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	customerSlugVal, ok := customerSlugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_slug expected to be basetypes.StringValue, was: %T`, customerSlugAttribute))
	}

	customerUuidAttribute, ok := attributes["customer_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`customer_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	customerUuidVal, ok := customerUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`customer_uuid expected to be basetypes.StringValue, was: %T`, customerUuidAttribute))
	}

	errorMessageAttribute, ok := attributes["error_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	errorMessageVal, ok := errorMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message expected to be basetypes.StringValue, was: %T`, errorMessageAttribute))
	}

	errorTracebackAttribute, ok := attributes["error_traceback"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_traceback is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	errorTracebackVal, ok := errorTracebackAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_traceback expected to be basetypes.StringValue, was: %T`, errorTracebackAttribute))
	}

	fixedPriceAttribute, ok := attributes["fixed_price"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_price is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	fixedPriceVal, ok := fixedPriceAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_price expected to be basetypes.Float64Value, was: %T`, fixedPriceAttribute))
	}

	issueAttribute, ok := attributes["issue"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`issue is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	issueVal, ok := issueAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`issue expected to be basetypes.ObjectValue, was: %T`, issueAttribute))
	}

	limitsAttribute, ok := attributes["limits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limits is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	limitsVal, ok := limitsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limits expected to be basetypes.MapValue, was: %T`, limitsAttribute))
	}

	marketplaceResourceUuidAttribute, ok := attributes["marketplace_resource_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`marketplace_resource_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	marketplaceResourceUuidVal, ok := marketplaceResourceUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`marketplace_resource_uuid expected to be basetypes.StringValue, was: %T`, marketplaceResourceUuidAttribute))
	}

	modifiedAttribute, ok := attributes["modified"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	modifiedVal, ok := modifiedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified expected to be basetypes.StringValue, was: %T`, modifiedAttribute))
	}

	newCostEstimateAttribute, ok := attributes["new_cost_estimate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_cost_estimate is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	newCostEstimateVal, ok := newCostEstimateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_cost_estimate expected to be basetypes.StringValue, was: %T`, newCostEstimateAttribute))
	}

	newPlanNameAttribute, ok := attributes["new_plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_plan_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	newPlanNameVal, ok := newPlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_plan_name expected to be basetypes.StringValue, was: %T`, newPlanNameAttribute))
	}

	newPlanUuidAttribute, ok := attributes["new_plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`new_plan_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	newPlanUuidVal, ok := newPlanUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`new_plan_uuid expected to be basetypes.StringValue, was: %T`, newPlanUuidAttribute))
	}

	offeringAttribute, ok := attributes["offering"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringVal, ok := offeringAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering expected to be basetypes.StringValue, was: %T`, offeringAttribute))
	}

	offeringBillableAttribute, ok := attributes["offering_billable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_billable is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringBillableVal, ok := offeringBillableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_billable expected to be basetypes.BoolValue, was: %T`, offeringBillableAttribute))
	}

	offeringDescriptionAttribute, ok := attributes["offering_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_description is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringDescriptionVal, ok := offeringDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_description expected to be basetypes.StringValue, was: %T`, offeringDescriptionAttribute))
	}

	offeringImageAttribute, ok := attributes["offering_image"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_image is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringImageVal, ok := offeringImageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_image expected to be basetypes.StringValue, was: %T`, offeringImageAttribute))
	}

	offeringNameAttribute, ok := attributes["offering_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringNameVal, ok := offeringNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_name expected to be basetypes.StringValue, was: %T`, offeringNameAttribute))
	}

	offeringSharedAttribute, ok := attributes["offering_shared"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_shared is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringSharedVal, ok := offeringSharedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_shared expected to be basetypes.BoolValue, was: %T`, offeringSharedAttribute))
	}

	offeringThumbnailAttribute, ok := attributes["offering_thumbnail"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_thumbnail is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringThumbnailVal, ok := offeringThumbnailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_thumbnail expected to be basetypes.StringValue, was: %T`, offeringThumbnailAttribute))
	}

	offeringTypeAttribute, ok := attributes["offering_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_type is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringTypeVal, ok := offeringTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_type expected to be basetypes.StringValue, was: %T`, offeringTypeAttribute))
	}

	offeringUuidAttribute, ok := attributes["offering_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offering_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	offeringUuidVal, ok := offeringUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offering_uuid expected to be basetypes.StringValue, was: %T`, offeringUuidAttribute))
	}

	oldCostEstimateAttribute, ok := attributes["old_cost_estimate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_cost_estimate is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	oldCostEstimateVal, ok := oldCostEstimateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_cost_estimate expected to be basetypes.StringValue, was: %T`, oldCostEstimateAttribute))
	}

	oldPlanNameAttribute, ok := attributes["old_plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_plan_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	oldPlanNameVal, ok := oldPlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_plan_name expected to be basetypes.StringValue, was: %T`, oldPlanNameAttribute))
	}

	oldPlanUuidAttribute, ok := attributes["old_plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`old_plan_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	oldPlanUuidVal, ok := oldPlanUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`old_plan_uuid expected to be basetypes.StringValue, was: %T`, oldPlanUuidAttribute))
	}

	outputAttribute, ok := attributes["output"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`output is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	outputVal, ok := outputAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`output expected to be basetypes.StringValue, was: %T`, outputAttribute))
	}

	planAttribute, ok := attributes["plan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	planVal, ok := planAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan expected to be basetypes.StringValue, was: %T`, planAttribute))
	}

	planDescriptionAttribute, ok := attributes["plan_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_description is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	planDescriptionVal, ok := planDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_description expected to be basetypes.StringValue, was: %T`, planDescriptionAttribute))
	}

	planNameAttribute, ok := attributes["plan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	planNameVal, ok := planNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_name expected to be basetypes.StringValue, was: %T`, planNameAttribute))
	}

	planUnitAttribute, ok := attributes["plan_unit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_unit is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	planUnitVal, ok := planUnitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_unit expected to be basetypes.StringValue, was: %T`, planUnitAttribute))
	}

	planUuidAttribute, ok := attributes["plan_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	planUuidVal, ok := planUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_uuid expected to be basetypes.StringValue, was: %T`, planUuidAttribute))
	}

	projectDescriptionAttribute, ok := attributes["project_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_description is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	projectDescriptionVal, ok := projectDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_description expected to be basetypes.StringValue, was: %T`, projectDescriptionAttribute))
	}

	projectNameAttribute, ok := attributes["project_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	projectNameVal, ok := projectNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_name expected to be basetypes.StringValue, was: %T`, projectNameAttribute))
	}

	projectSlugAttribute, ok := attributes["project_slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_slug is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	projectSlugVal, ok := projectSlugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_slug expected to be basetypes.StringValue, was: %T`, projectSlugAttribute))
	}

	projectUuidAttribute, ok := attributes["project_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	projectUuidVal, ok := projectUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_uuid expected to be basetypes.StringValue, was: %T`, projectUuidAttribute))
	}

	providerNameAttribute, ok := attributes["provider_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerNameVal, ok := providerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_name expected to be basetypes.StringValue, was: %T`, providerNameAttribute))
	}

	providerReviewedAtAttribute, ok := attributes["provider_reviewed_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_at is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerReviewedAtVal, ok := providerReviewedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_at expected to be basetypes.StringValue, was: %T`, providerReviewedAtAttribute))
	}

	providerReviewedByAttribute, ok := attributes["provider_reviewed_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerReviewedByVal, ok := providerReviewedByAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by expected to be basetypes.StringValue, was: %T`, providerReviewedByAttribute))
	}

	providerReviewedByFullNameAttribute, ok := attributes["provider_reviewed_by_full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by_full_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerReviewedByFullNameVal, ok := providerReviewedByFullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by_full_name expected to be basetypes.StringValue, was: %T`, providerReviewedByFullNameAttribute))
	}

	providerReviewedByUsernameAttribute, ok := attributes["provider_reviewed_by_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_reviewed_by_username is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerReviewedByUsernameVal, ok := providerReviewedByUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_reviewed_by_username expected to be basetypes.StringValue, was: %T`, providerReviewedByUsernameAttribute))
	}

	providerUuidAttribute, ok := attributes["provider_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	providerUuidVal, ok := providerUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_uuid expected to be basetypes.StringValue, was: %T`, providerUuidAttribute))
	}

	requestCommentAttribute, ok := attributes["request_comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`request_comment is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	requestCommentVal, ok := requestCommentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`request_comment expected to be basetypes.StringValue, was: %T`, requestCommentAttribute))
	}

	resourceNameAttribute, ok := attributes["resource_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_name is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	resourceNameVal, ok := resourceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_name expected to be basetypes.StringValue, was: %T`, resourceNameAttribute))
	}

	resourceTypeAttribute, ok := attributes["resource_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_type is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	resourceTypeVal, ok := resourceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_type expected to be basetypes.StringValue, was: %T`, resourceTypeAttribute))
	}

	resourceUuidAttribute, ok := attributes["resource_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	resourceUuidVal, ok := resourceUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_uuid expected to be basetypes.StringValue, was: %T`, resourceUuidAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	terminationCommentAttribute, ok := attributes["termination_comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`termination_comment is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	terminationCommentVal, ok := terminationCommentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`termination_comment expected to be basetypes.StringValue, was: %T`, terminationCommentAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewOrdersValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewOrdersValueUnknown(), diags
	}

	return OrdersValue{
		ActivationPrice:            activationPriceVal,
		Attachment:                 attachmentVal,
		BackendId:                  backendIdVal,
		CallbackUrl:                callbackUrlVal,
		CanTerminate:               canTerminateVal,
		CategoryIcon:               categoryIconVal,
		CategoryTitle:              categoryTitleVal,
		CategoryUuid:               categoryUuidVal,
		CompletedAt:                completedAtVal,
		ConsumerReviewedAt:         consumerReviewedAtVal,
		ConsumerReviewedBy:         consumerReviewedByVal,
		ConsumerReviewedByFullName: consumerReviewedByFullNameVal,
		ConsumerReviewedByUsername: consumerReviewedByUsernameVal,
		Cost:                       costVal,
		Created:                    createdVal,
		CreatedByCivilNumber:       createdByCivilNumberVal,
		CreatedByFullName:          createdByFullNameVal,
		CreatedByUsername:          createdByUsernameVal,
		CustomerName:               customerNameVal,
		CustomerSlug:               customerSlugVal,
		CustomerUuid:               customerUuidVal,
		ErrorMessage:               errorMessageVal,
		ErrorTraceback:             errorTracebackVal,
		FixedPrice:                 fixedPriceVal,
		Issue:                      issueVal,
		Limits:                     limitsVal,
		MarketplaceResourceUuid:    marketplaceResourceUuidVal,
		Modified:                   modifiedVal,
		NewCostEstimate:            newCostEstimateVal,
		NewPlanName:                newPlanNameVal,
		NewPlanUuid:                newPlanUuidVal,
		Offering:                   offeringVal,
		OfferingBillable:           offeringBillableVal,
		OfferingDescription:        offeringDescriptionVal,
		OfferingImage:              offeringImageVal,
		OfferingName:               offeringNameVal,
		OfferingShared:             offeringSharedVal,
		OfferingThumbnail:          offeringThumbnailVal,
		OfferingType:               offeringTypeVal,
		OfferingUuid:               offeringUuidVal,
		OldCostEstimate:            oldCostEstimateVal,
		OldPlanName:                oldPlanNameVal,
		OldPlanUuid:                oldPlanUuidVal,
		Output:                     outputVal,
		Plan:                       planVal,
		PlanDescription:            planDescriptionVal,
		PlanName:                   planNameVal,
		PlanUnit:                   planUnitVal,
		PlanUuid:                   planUuidVal,
		ProjectDescription:         projectDescriptionVal,
		ProjectName:                projectNameVal,
		ProjectSlug:                projectSlugVal,
		ProjectUuid:                projectUuidVal,
		ProviderName:               providerNameVal,
		ProviderReviewedAt:         providerReviewedAtVal,
		ProviderReviewedBy:         providerReviewedByVal,
		ProviderReviewedByFullName: providerReviewedByFullNameVal,
		ProviderReviewedByUsername: providerReviewedByUsernameVal,
		ProviderUuid:               providerUuidVal,
		RequestComment:             requestCommentVal,
		ResourceName:               resourceNameVal,
		ResourceType:               resourceTypeVal,
		ResourceUuid:               resourceUuidVal,
		State:                      stateVal,
		TerminationComment:         terminationCommentVal,
		OrdersType:                 typeVal,
		Uuid:                       uuidVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewOrdersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrdersValue {
	object, diags := NewOrdersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrdersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrdersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrdersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrdersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrdersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrdersValueMust(OrdersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrdersType) ValueType(ctx context.Context) attr.Value {
	return OrdersValue{}
}

var _ basetypes.ObjectValuable = OrdersValue{}

type OrdersValue struct {
	ActivationPrice            basetypes.Float64Value `tfsdk:"activation_price"`
	Attachment                 basetypes.StringValue  `tfsdk:"attachment"`
	BackendId                  basetypes.StringValue  `tfsdk:"backend_id"`
	CallbackUrl                basetypes.StringValue  `tfsdk:"callback_url"`
	CanTerminate               basetypes.BoolValue    `tfsdk:"can_terminate"`
	CategoryIcon               basetypes.StringValue  `tfsdk:"category_icon"`
	CategoryTitle              basetypes.StringValue  `tfsdk:"category_title"`
	CategoryUuid               basetypes.StringValue  `tfsdk:"category_uuid"`
	CompletedAt                basetypes.StringValue  `tfsdk:"completed_at"`
	ConsumerReviewedAt         basetypes.StringValue  `tfsdk:"consumer_reviewed_at"`
	ConsumerReviewedBy         basetypes.StringValue  `tfsdk:"consumer_reviewed_by"`
	ConsumerReviewedByFullName basetypes.StringValue  `tfsdk:"consumer_reviewed_by_full_name"`
	ConsumerReviewedByUsername basetypes.StringValue  `tfsdk:"consumer_reviewed_by_username"`
	Cost                       basetypes.StringValue  `tfsdk:"cost"`
	Created                    basetypes.StringValue  `tfsdk:"created"`
	CreatedByCivilNumber       basetypes.StringValue  `tfsdk:"created_by_civil_number"`
	CreatedByFullName          basetypes.StringValue  `tfsdk:"created_by_full_name"`
	CreatedByUsername          basetypes.StringValue  `tfsdk:"created_by_username"`
	CustomerName               basetypes.StringValue  `tfsdk:"customer_name"`
	CustomerSlug               basetypes.StringValue  `tfsdk:"customer_slug"`
	CustomerUuid               basetypes.StringValue  `tfsdk:"customer_uuid"`
	ErrorMessage               basetypes.StringValue  `tfsdk:"error_message"`
	ErrorTraceback             basetypes.StringValue  `tfsdk:"error_traceback"`
	FixedPrice                 basetypes.Float64Value `tfsdk:"fixed_price"`
	Issue                      basetypes.ObjectValue  `tfsdk:"issue"`
	Limits                     basetypes.MapValue     `tfsdk:"limits"`
	MarketplaceResourceUuid    basetypes.StringValue  `tfsdk:"marketplace_resource_uuid"`
	Modified                   basetypes.StringValue  `tfsdk:"modified"`
	NewCostEstimate            basetypes.StringValue  `tfsdk:"new_cost_estimate"`
	NewPlanName                basetypes.StringValue  `tfsdk:"new_plan_name"`
	NewPlanUuid                basetypes.StringValue  `tfsdk:"new_plan_uuid"`
	Offering                   basetypes.StringValue  `tfsdk:"offering"`
	OfferingBillable           basetypes.BoolValue    `tfsdk:"offering_billable"`
	OfferingDescription        basetypes.StringValue  `tfsdk:"offering_description"`
	OfferingImage              basetypes.StringValue  `tfsdk:"offering_image"`
	OfferingName               basetypes.StringValue  `tfsdk:"offering_name"`
	OfferingShared             basetypes.BoolValue    `tfsdk:"offering_shared"`
	OfferingThumbnail          basetypes.StringValue  `tfsdk:"offering_thumbnail"`
	OfferingType               basetypes.StringValue  `tfsdk:"offering_type"`
	OfferingUuid               basetypes.StringValue  `tfsdk:"offering_uuid"`
	OldCostEstimate            basetypes.StringValue  `tfsdk:"old_cost_estimate"`
	OldPlanName                basetypes.StringValue  `tfsdk:"old_plan_name"`
	OldPlanUuid                basetypes.StringValue  `tfsdk:"old_plan_uuid"`
	Output                     basetypes.StringValue  `tfsdk:"output"`
	Plan                       basetypes.StringValue  `tfsdk:"plan"`
	PlanDescription            basetypes.StringValue  `tfsdk:"plan_description"`
	PlanName                   basetypes.StringValue  `tfsdk:"plan_name"`
	PlanUnit                   basetypes.StringValue  `tfsdk:"plan_unit"`
	PlanUuid                   basetypes.StringValue  `tfsdk:"plan_uuid"`
	ProjectDescription         basetypes.StringValue  `tfsdk:"project_description"`
	ProjectName                basetypes.StringValue  `tfsdk:"project_name"`
	ProjectSlug                basetypes.StringValue  `tfsdk:"project_slug"`
	ProjectUuid                basetypes.StringValue  `tfsdk:"project_uuid"`
	ProviderName               basetypes.StringValue  `tfsdk:"provider_name"`
	ProviderReviewedAt         basetypes.StringValue  `tfsdk:"provider_reviewed_at"`
	ProviderReviewedBy         basetypes.StringValue  `tfsdk:"provider_reviewed_by"`
	ProviderReviewedByFullName basetypes.StringValue  `tfsdk:"provider_reviewed_by_full_name"`
	ProviderReviewedByUsername basetypes.StringValue  `tfsdk:"provider_reviewed_by_username"`
	ProviderUuid               basetypes.StringValue  `tfsdk:"provider_uuid"`
	RequestComment             basetypes.StringValue  `tfsdk:"request_comment"`
	ResourceName               basetypes.StringValue  `tfsdk:"resource_name"`
	ResourceType               basetypes.StringValue  `tfsdk:"resource_type"`
	ResourceUuid               basetypes.StringValue  `tfsdk:"resource_uuid"`
	State                      basetypes.StringValue  `tfsdk:"state"`
	TerminationComment         basetypes.StringValue  `tfsdk:"termination_comment"`
	OrdersType                 basetypes.StringValue  `tfsdk:"type"`
	Uuid                       basetypes.StringValue  `tfsdk:"uuid"`
	state                      attr.ValueState
}

func (v OrdersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 67)

	var val tftypes.Value
	var err error

	attrTypes["activation_price"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["attachment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["backend_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["callback_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["can_terminate"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["category_icon"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["category_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["category_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["completed_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["consumer_reviewed_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["consumer_reviewed_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["consumer_reviewed_by_full_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["consumer_reviewed_by_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cost"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by_civil_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by_full_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_by_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["customer_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["customer_slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["customer_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["error_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["error_traceback"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fixed_price"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["issue"] = basetypes.ObjectType{
		AttrTypes: IssueValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["limits"] = basetypes.MapType{
		ElemType: types.Int64Type,
	}.TerraformType(ctx)
	attrTypes["marketplace_resource_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["new_cost_estimate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["new_plan_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["new_plan_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_billable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["offering_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_image"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_shared"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["offering_thumbnail"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offering_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["old_cost_estimate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["old_plan_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["old_plan_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["output"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plan"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plan_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plan_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plan_unit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plan_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project_slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_reviewed_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_reviewed_by"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_reviewed_by_full_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_reviewed_by_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["request_comment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["termination_comment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 67)

		val, err = v.ActivationPrice.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["activation_price"] = val

		val, err = v.Attachment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attachment"] = val

		val, err = v.BackendId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["backend_id"] = val

		val, err = v.CallbackUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["callback_url"] = val

		val, err = v.CanTerminate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["can_terminate"] = val

		val, err = v.CategoryIcon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category_icon"] = val

		val, err = v.CategoryTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category_title"] = val

		val, err = v.CategoryUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category_uuid"] = val

		val, err = v.CompletedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["completed_at"] = val

		val, err = v.ConsumerReviewedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["consumer_reviewed_at"] = val

		val, err = v.ConsumerReviewedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["consumer_reviewed_by"] = val

		val, err = v.ConsumerReviewedByFullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["consumer_reviewed_by_full_name"] = val

		val, err = v.ConsumerReviewedByUsername.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["consumer_reviewed_by_username"] = val

		val, err = v.Cost.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost"] = val

		val, err = v.Created.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created"] = val

		val, err = v.CreatedByCivilNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by_civil_number"] = val

		val, err = v.CreatedByFullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by_full_name"] = val

		val, err = v.CreatedByUsername.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by_username"] = val

		val, err = v.CustomerName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["customer_name"] = val

		val, err = v.CustomerSlug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["customer_slug"] = val

		val, err = v.CustomerUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["customer_uuid"] = val

		val, err = v.ErrorMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["error_message"] = val

		val, err = v.ErrorTraceback.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["error_traceback"] = val

		val, err = v.FixedPrice.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fixed_price"] = val

		val, err = v.Issue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["issue"] = val

		val, err = v.Limits.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["limits"] = val

		val, err = v.MarketplaceResourceUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["marketplace_resource_uuid"] = val

		val, err = v.Modified.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified"] = val

		val, err = v.NewCostEstimate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["new_cost_estimate"] = val

		val, err = v.NewPlanName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["new_plan_name"] = val

		val, err = v.NewPlanUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["new_plan_uuid"] = val

		val, err = v.Offering.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering"] = val

		val, err = v.OfferingBillable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_billable"] = val

		val, err = v.OfferingDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_description"] = val

		val, err = v.OfferingImage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_image"] = val

		val, err = v.OfferingName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_name"] = val

		val, err = v.OfferingShared.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_shared"] = val

		val, err = v.OfferingThumbnail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_thumbnail"] = val

		val, err = v.OfferingType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_type"] = val

		val, err = v.OfferingUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offering_uuid"] = val

		val, err = v.OldCostEstimate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["old_cost_estimate"] = val

		val, err = v.OldPlanName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["old_plan_name"] = val

		val, err = v.OldPlanUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["old_plan_uuid"] = val

		val, err = v.Output.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["output"] = val

		val, err = v.Plan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan"] = val

		val, err = v.PlanDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan_description"] = val

		val, err = v.PlanName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan_name"] = val

		val, err = v.PlanUnit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan_unit"] = val

		val, err = v.PlanUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan_uuid"] = val

		val, err = v.ProjectDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project_description"] = val

		val, err = v.ProjectName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project_name"] = val

		val, err = v.ProjectSlug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project_slug"] = val

		val, err = v.ProjectUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project_uuid"] = val

		val, err = v.ProviderName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_name"] = val

		val, err = v.ProviderReviewedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_reviewed_at"] = val

		val, err = v.ProviderReviewedBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_reviewed_by"] = val

		val, err = v.ProviderReviewedByFullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_reviewed_by_full_name"] = val

		val, err = v.ProviderReviewedByUsername.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_reviewed_by_username"] = val

		val, err = v.ProviderUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_uuid"] = val

		val, err = v.RequestComment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["request_comment"] = val

		val, err = v.ResourceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_name"] = val

		val, err = v.ResourceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_type"] = val

		val, err = v.ResourceUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_uuid"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.TerminationComment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["termination_comment"] = val

		val, err = v.OrdersType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrdersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrdersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrdersValue) String() string {
	return "OrdersValue"
}

func (v OrdersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var issue basetypes.ObjectValue

	if v.Issue.IsNull() {
		issue = types.ObjectNull(
			IssueValue{}.AttributeTypes(ctx),
		)
	}

	if v.Issue.IsUnknown() {
		issue = types.ObjectUnknown(
			IssueValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Issue.IsNull() && !v.Issue.IsUnknown() {
		issue = types.ObjectValueMust(
			IssueValue{}.AttributeTypes(ctx),
			v.Issue.Attributes(),
		)
	}

	var limitsVal basetypes.MapValue
	switch {
	case v.Limits.IsUnknown():
		limitsVal = types.MapUnknown(types.Int64Type)
	case v.Limits.IsNull():
		limitsVal = types.MapNull(types.Int64Type)
	default:
		var d diag.Diagnostics
		limitsVal, d = types.MapValue(types.Int64Type, v.Limits.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"activation_price":               basetypes.Float64Type{},
			"attachment":                     basetypes.StringType{},
			"backend_id":                     basetypes.StringType{},
			"callback_url":                   basetypes.StringType{},
			"can_terminate":                  basetypes.BoolType{},
			"category_icon":                  basetypes.StringType{},
			"category_title":                 basetypes.StringType{},
			"category_uuid":                  basetypes.StringType{},
			"completed_at":                   basetypes.StringType{},
			"consumer_reviewed_at":           basetypes.StringType{},
			"consumer_reviewed_by":           basetypes.StringType{},
			"consumer_reviewed_by_full_name": basetypes.StringType{},
			"consumer_reviewed_by_username":  basetypes.StringType{},
			"cost":                           basetypes.StringType{},
			"created":                        basetypes.StringType{},
			"created_by_civil_number":        basetypes.StringType{},
			"created_by_full_name":           basetypes.StringType{},
			"created_by_username":            basetypes.StringType{},
			"customer_name":                  basetypes.StringType{},
			"customer_slug":                  basetypes.StringType{},
			"customer_uuid":                  basetypes.StringType{},
			"error_message":                  basetypes.StringType{},
			"error_traceback":                basetypes.StringType{},
			"fixed_price":                    basetypes.Float64Type{},
			"issue": basetypes.ObjectType{
				AttrTypes: IssueValue{}.AttributeTypes(ctx),
			},
			"limits": basetypes.MapType{
				ElemType: types.Int64Type,
			},
			"marketplace_resource_uuid":      basetypes.StringType{},
			"modified":                       basetypes.StringType{},
			"new_cost_estimate":              basetypes.StringType{},
			"new_plan_name":                  basetypes.StringType{},
			"new_plan_uuid":                  basetypes.StringType{},
			"offering":                       basetypes.StringType{},
			"offering_billable":              basetypes.BoolType{},
			"offering_description":           basetypes.StringType{},
			"offering_image":                 basetypes.StringType{},
			"offering_name":                  basetypes.StringType{},
			"offering_shared":                basetypes.BoolType{},
			"offering_thumbnail":             basetypes.StringType{},
			"offering_type":                  basetypes.StringType{},
			"offering_uuid":                  basetypes.StringType{},
			"old_cost_estimate":              basetypes.StringType{},
			"old_plan_name":                  basetypes.StringType{},
			"old_plan_uuid":                  basetypes.StringType{},
			"output":                         basetypes.StringType{},
			"plan":                           basetypes.StringType{},
			"plan_description":               basetypes.StringType{},
			"plan_name":                      basetypes.StringType{},
			"plan_unit":                      basetypes.StringType{},
			"plan_uuid":                      basetypes.StringType{},
			"project_description":            basetypes.StringType{},
			"project_name":                   basetypes.StringType{},
			"project_slug":                   basetypes.StringType{},
			"project_uuid":                   basetypes.StringType{},
			"provider_name":                  basetypes.StringType{},
			"provider_reviewed_at":           basetypes.StringType{},
			"provider_reviewed_by":           basetypes.StringType{},
			"provider_reviewed_by_full_name": basetypes.StringType{},
			"provider_reviewed_by_username":  basetypes.StringType{},
			"provider_uuid":                  basetypes.StringType{},
			"request_comment":                basetypes.StringType{},
			"resource_name":                  basetypes.StringType{},
			"resource_type":                  basetypes.StringType{},
			"resource_uuid":                  basetypes.StringType{},
			"state":                          basetypes.StringType{},
			"termination_comment":            basetypes.StringType{},
			"type":                           basetypes.StringType{},
			"uuid":                           basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"activation_price":               basetypes.Float64Type{},
		"attachment":                     basetypes.StringType{},
		"backend_id":                     basetypes.StringType{},
		"callback_url":                   basetypes.StringType{},
		"can_terminate":                  basetypes.BoolType{},
		"category_icon":                  basetypes.StringType{},
		"category_title":                 basetypes.StringType{},
		"category_uuid":                  basetypes.StringType{},
		"completed_at":                   basetypes.StringType{},
		"consumer_reviewed_at":           basetypes.StringType{},
		"consumer_reviewed_by":           basetypes.StringType{},
		"consumer_reviewed_by_full_name": basetypes.StringType{},
		"consumer_reviewed_by_username":  basetypes.StringType{},
		"cost":                           basetypes.StringType{},
		"created":                        basetypes.StringType{},
		"created_by_civil_number":        basetypes.StringType{},
		"created_by_full_name":           basetypes.StringType{},
		"created_by_username":            basetypes.StringType{},
		"customer_name":                  basetypes.StringType{},
		"customer_slug":                  basetypes.StringType{},
		"customer_uuid":                  basetypes.StringType{},
		"error_message":                  basetypes.StringType{},
		"error_traceback":                basetypes.StringType{},
		"fixed_price":                    basetypes.Float64Type{},
		"issue": basetypes.ObjectType{
			AttrTypes: IssueValue{}.AttributeTypes(ctx),
		},
		"limits": basetypes.MapType{
			ElemType: types.Int64Type,
		},
		"marketplace_resource_uuid":      basetypes.StringType{},
		"modified":                       basetypes.StringType{},
		"new_cost_estimate":              basetypes.StringType{},
		"new_plan_name":                  basetypes.StringType{},
		"new_plan_uuid":                  basetypes.StringType{},
		"offering":                       basetypes.StringType{},
		"offering_billable":              basetypes.BoolType{},
		"offering_description":           basetypes.StringType{},
		"offering_image":                 basetypes.StringType{},
		"offering_name":                  basetypes.StringType{},
		"offering_shared":                basetypes.BoolType{},
		"offering_thumbnail":             basetypes.StringType{},
		"offering_type":                  basetypes.StringType{},
		"offering_uuid":                  basetypes.StringType{},
		"old_cost_estimate":              basetypes.StringType{},
		"old_plan_name":                  basetypes.StringType{},
		"old_plan_uuid":                  basetypes.StringType{},
		"output":                         basetypes.StringType{},
		"plan":                           basetypes.StringType{},
		"plan_description":               basetypes.StringType{},
		"plan_name":                      basetypes.StringType{},
		"plan_unit":                      basetypes.StringType{},
		"plan_uuid":                      basetypes.StringType{},
		"project_description":            basetypes.StringType{},
		"project_name":                   basetypes.StringType{},
		"project_slug":                   basetypes.StringType{},
		"project_uuid":                   basetypes.StringType{},
		"provider_name":                  basetypes.StringType{},
		"provider_reviewed_at":           basetypes.StringType{},
		"provider_reviewed_by":           basetypes.StringType{},
		"provider_reviewed_by_full_name": basetypes.StringType{},
		"provider_reviewed_by_username":  basetypes.StringType{},
		"provider_uuid":                  basetypes.StringType{},
		"request_comment":                basetypes.StringType{},
		"resource_name":                  basetypes.StringType{},
		"resource_type":                  basetypes.StringType{},
		"resource_uuid":                  basetypes.StringType{},
		"state":                          basetypes.StringType{},
		"termination_comment":            basetypes.StringType{},
		"type":                           basetypes.StringType{},
		"uuid":                           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"activation_price":               v.ActivationPrice,
			"attachment":                     v.Attachment,
			"backend_id":                     v.BackendId,
			"callback_url":                   v.CallbackUrl,
			"can_terminate":                  v.CanTerminate,
			"category_icon":                  v.CategoryIcon,
			"category_title":                 v.CategoryTitle,
			"category_uuid":                  v.CategoryUuid,
			"completed_at":                   v.CompletedAt,
			"consumer_reviewed_at":           v.ConsumerReviewedAt,
			"consumer_reviewed_by":           v.ConsumerReviewedBy,
			"consumer_reviewed_by_full_name": v.ConsumerReviewedByFullName,
			"consumer_reviewed_by_username":  v.ConsumerReviewedByUsername,
			"cost":                           v.Cost,
			"created":                        v.Created,
			"created_by_civil_number":        v.CreatedByCivilNumber,
			"created_by_full_name":           v.CreatedByFullName,
			"created_by_username":            v.CreatedByUsername,
			"customer_name":                  v.CustomerName,
			"customer_slug":                  v.CustomerSlug,
			"customer_uuid":                  v.CustomerUuid,
			"error_message":                  v.ErrorMessage,
			"error_traceback":                v.ErrorTraceback,
			"fixed_price":                    v.FixedPrice,
			"issue":                          issue,
			"limits":                         limitsVal,
			"marketplace_resource_uuid":      v.MarketplaceResourceUuid,
			"modified":                       v.Modified,
			"new_cost_estimate":              v.NewCostEstimate,
			"new_plan_name":                  v.NewPlanName,
			"new_plan_uuid":                  v.NewPlanUuid,
			"offering":                       v.Offering,
			"offering_billable":              v.OfferingBillable,
			"offering_description":           v.OfferingDescription,
			"offering_image":                 v.OfferingImage,
			"offering_name":                  v.OfferingName,
			"offering_shared":                v.OfferingShared,
			"offering_thumbnail":             v.OfferingThumbnail,
			"offering_type":                  v.OfferingType,
			"offering_uuid":                  v.OfferingUuid,
			"old_cost_estimate":              v.OldCostEstimate,
			"old_plan_name":                  v.OldPlanName,
			"old_plan_uuid":                  v.OldPlanUuid,
			"output":                         v.Output,
			"plan":                           v.Plan,
			"plan_description":               v.PlanDescription,
			"plan_name":                      v.PlanName,
			"plan_unit":                      v.PlanUnit,
			"plan_uuid":                      v.PlanUuid,
			"project_description":            v.ProjectDescription,
			"project_name":                   v.ProjectName,
			"project_slug":                   v.ProjectSlug,
			"project_uuid":                   v.ProjectUuid,
			"provider_name":                  v.ProviderName,
			"provider_reviewed_at":           v.ProviderReviewedAt,
			"provider_reviewed_by":           v.ProviderReviewedBy,
			"provider_reviewed_by_full_name": v.ProviderReviewedByFullName,
			"provider_reviewed_by_username":  v.ProviderReviewedByUsername,
			"provider_uuid":                  v.ProviderUuid,
			"request_comment":                v.RequestComment,
			"resource_name":                  v.ResourceName,
			"resource_type":                  v.ResourceType,
			"resource_uuid":                  v.ResourceUuid,
			"state":                          v.State,
			"termination_comment":            v.TerminationComment,
			"type":                           v.OrdersType,
			"uuid":                           v.Uuid,
		})

	return objVal, diags
}

func (v OrdersValue) Equal(o attr.Value) bool {
	other, ok := o.(OrdersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ActivationPrice.Equal(other.ActivationPrice) {
		return false
	}

	if !v.Attachment.Equal(other.Attachment) {
		return false
	}

	if !v.BackendId.Equal(other.BackendId) {
		return false
	}

	if !v.CallbackUrl.Equal(other.CallbackUrl) {
		return false
	}

	if !v.CanTerminate.Equal(other.CanTerminate) {
		return false
	}

	if !v.CategoryIcon.Equal(other.CategoryIcon) {
		return false
	}

	if !v.CategoryTitle.Equal(other.CategoryTitle) {
		return false
	}

	if !v.CategoryUuid.Equal(other.CategoryUuid) {
		return false
	}

	if !v.CompletedAt.Equal(other.CompletedAt) {
		return false
	}

	if !v.ConsumerReviewedAt.Equal(other.ConsumerReviewedAt) {
		return false
	}

	if !v.ConsumerReviewedBy.Equal(other.ConsumerReviewedBy) {
		return false
	}

	if !v.ConsumerReviewedByFullName.Equal(other.ConsumerReviewedByFullName) {
		return false
	}

	if !v.ConsumerReviewedByUsername.Equal(other.ConsumerReviewedByUsername) {
		return false
	}

	if !v.Cost.Equal(other.Cost) {
		return false
	}

	if !v.Created.Equal(other.Created) {
		return false
	}

	if !v.CreatedByCivilNumber.Equal(other.CreatedByCivilNumber) {
		return false
	}

	if !v.CreatedByFullName.Equal(other.CreatedByFullName) {
		return false
	}

	if !v.CreatedByUsername.Equal(other.CreatedByUsername) {
		return false
	}

	if !v.CustomerName.Equal(other.CustomerName) {
		return false
	}

	if !v.CustomerSlug.Equal(other.CustomerSlug) {
		return false
	}

	if !v.CustomerUuid.Equal(other.CustomerUuid) {
		return false
	}

	if !v.ErrorMessage.Equal(other.ErrorMessage) {
		return false
	}

	if !v.ErrorTraceback.Equal(other.ErrorTraceback) {
		return false
	}

	if !v.FixedPrice.Equal(other.FixedPrice) {
		return false
	}

	if !v.Issue.Equal(other.Issue) {
		return false
	}

	if !v.Limits.Equal(other.Limits) {
		return false
	}

	if !v.MarketplaceResourceUuid.Equal(other.MarketplaceResourceUuid) {
		return false
	}

	if !v.Modified.Equal(other.Modified) {
		return false
	}

	if !v.NewCostEstimate.Equal(other.NewCostEstimate) {
		return false
	}

	if !v.NewPlanName.Equal(other.NewPlanName) {
		return false
	}

	if !v.NewPlanUuid.Equal(other.NewPlanUuid) {
		return false
	}

	if !v.Offering.Equal(other.Offering) {
		return false
	}

	if !v.OfferingBillable.Equal(other.OfferingBillable) {
		return false
	}

	if !v.OfferingDescription.Equal(other.OfferingDescription) {
		return false
	}

	if !v.OfferingImage.Equal(other.OfferingImage) {
		return false
	}

	if !v.OfferingName.Equal(other.OfferingName) {
		return false
	}

	if !v.OfferingShared.Equal(other.OfferingShared) {
		return false
	}

	if !v.OfferingThumbnail.Equal(other.OfferingThumbnail) {
		return false
	}

	if !v.OfferingType.Equal(other.OfferingType) {
		return false
	}

	if !v.OfferingUuid.Equal(other.OfferingUuid) {
		return false
	}

	if !v.OldCostEstimate.Equal(other.OldCostEstimate) {
		return false
	}

	if !v.OldPlanName.Equal(other.OldPlanName) {
		return false
	}

	if !v.OldPlanUuid.Equal(other.OldPlanUuid) {
		return false
	}

	if !v.Output.Equal(other.Output) {
		return false
	}

	if !v.Plan.Equal(other.Plan) {
		return false
	}

	if !v.PlanDescription.Equal(other.PlanDescription) {
		return false
	}

	if !v.PlanName.Equal(other.PlanName) {
		return false
	}

	if !v.PlanUnit.Equal(other.PlanUnit) {
		return false
	}

	if !v.PlanUuid.Equal(other.PlanUuid) {
		return false
	}

	if !v.ProjectDescription.Equal(other.ProjectDescription) {
		return false
	}

	if !v.ProjectName.Equal(other.ProjectName) {
		return false
	}

	if !v.ProjectSlug.Equal(other.ProjectSlug) {
		return false
	}

	if !v.ProjectUuid.Equal(other.ProjectUuid) {
		return false
	}

	if !v.ProviderName.Equal(other.ProviderName) {
		return false
	}

	if !v.ProviderReviewedAt.Equal(other.ProviderReviewedAt) {
		return false
	}

	if !v.ProviderReviewedBy.Equal(other.ProviderReviewedBy) {
		return false
	}

	if !v.ProviderReviewedByFullName.Equal(other.ProviderReviewedByFullName) {
		return false
	}

	if !v.ProviderReviewedByUsername.Equal(other.ProviderReviewedByUsername) {
		return false
	}

	if !v.ProviderUuid.Equal(other.ProviderUuid) {
		return false
	}

	if !v.RequestComment.Equal(other.RequestComment) {
		return false
	}

	if !v.ResourceName.Equal(other.ResourceName) {
		return false
	}

	if !v.ResourceType.Equal(other.ResourceType) {
		return false
	}

	if !v.ResourceUuid.Equal(other.ResourceUuid) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.TerminationComment.Equal(other.TerminationComment) {
		return false
	}

	if !v.OrdersType.Equal(other.OrdersType) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v OrdersValue) Type(ctx context.Context) attr.Type {
	return OrdersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrdersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"activation_price":               basetypes.Float64Type{},
		"attachment":                     basetypes.StringType{},
		"backend_id":                     basetypes.StringType{},
		"callback_url":                   basetypes.StringType{},
		"can_terminate":                  basetypes.BoolType{},
		"category_icon":                  basetypes.StringType{},
		"category_title":                 basetypes.StringType{},
		"category_uuid":                  basetypes.StringType{},
		"completed_at":                   basetypes.StringType{},
		"consumer_reviewed_at":           basetypes.StringType{},
		"consumer_reviewed_by":           basetypes.StringType{},
		"consumer_reviewed_by_full_name": basetypes.StringType{},
		"consumer_reviewed_by_username":  basetypes.StringType{},
		"cost":                           basetypes.StringType{},
		"created":                        basetypes.StringType{},
		"created_by_civil_number":        basetypes.StringType{},
		"created_by_full_name":           basetypes.StringType{},
		"created_by_username":            basetypes.StringType{},
		"customer_name":                  basetypes.StringType{},
		"customer_slug":                  basetypes.StringType{},
		"customer_uuid":                  basetypes.StringType{},
		"error_message":                  basetypes.StringType{},
		"error_traceback":                basetypes.StringType{},
		"fixed_price":                    basetypes.Float64Type{},
		"issue": basetypes.ObjectType{
			AttrTypes: IssueValue{}.AttributeTypes(ctx),
		},
		"limits": basetypes.MapType{
			ElemType: types.Int64Type,
		},
		"marketplace_resource_uuid":      basetypes.StringType{},
		"modified":                       basetypes.StringType{},
		"new_cost_estimate":              basetypes.StringType{},
		"new_plan_name":                  basetypes.StringType{},
		"new_plan_uuid":                  basetypes.StringType{},
		"offering":                       basetypes.StringType{},
		"offering_billable":              basetypes.BoolType{},
		"offering_description":           basetypes.StringType{},
		"offering_image":                 basetypes.StringType{},
		"offering_name":                  basetypes.StringType{},
		"offering_shared":                basetypes.BoolType{},
		"offering_thumbnail":             basetypes.StringType{},
		"offering_type":                  basetypes.StringType{},
		"offering_uuid":                  basetypes.StringType{},
		"old_cost_estimate":              basetypes.StringType{},
		"old_plan_name":                  basetypes.StringType{},
		"old_plan_uuid":                  basetypes.StringType{},
		"output":                         basetypes.StringType{},
		"plan":                           basetypes.StringType{},
		"plan_description":               basetypes.StringType{},
		"plan_name":                      basetypes.StringType{},
		"plan_unit":                      basetypes.StringType{},
		"plan_uuid":                      basetypes.StringType{},
		"project_description":            basetypes.StringType{},
		"project_name":                   basetypes.StringType{},
		"project_slug":                   basetypes.StringType{},
		"project_uuid":                   basetypes.StringType{},
		"provider_name":                  basetypes.StringType{},
		"provider_reviewed_at":           basetypes.StringType{},
		"provider_reviewed_by":           basetypes.StringType{},
		"provider_reviewed_by_full_name": basetypes.StringType{},
		"provider_reviewed_by_username":  basetypes.StringType{},
		"provider_uuid":                  basetypes.StringType{},
		"request_comment":                basetypes.StringType{},
		"resource_name":                  basetypes.StringType{},
		"resource_type":                  basetypes.StringType{},
		"resource_uuid":                  basetypes.StringType{},
		"state":                          basetypes.StringType{},
		"termination_comment":            basetypes.StringType{},
		"type":                           basetypes.StringType{},
		"uuid":                           basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = IssueType{}

type IssueType struct {
	basetypes.ObjectType
}

func (t IssueType) Equal(o attr.Type) bool {
	other, ok := o.(IssueType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IssueType) String() string {
	return "IssueType"
}

func (t IssueType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IssueValue{
		Key:   keyVal,
		Uuid:  uuidVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewIssueValueNull() IssueValue {
	return IssueValue{
		state: attr.ValueStateNull,
	}
}

func NewIssueValueUnknown() IssueValue {
	return IssueValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIssueValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IssueValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IssueValue Attribute Value",
				"While creating a IssueValue value, a missing attribute value was detected. "+
					"A IssueValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IssueValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IssueValue Attribute Type",
				"While creating a IssueValue value, an invalid attribute value was detected. "+
					"A IssueValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IssueValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IssueValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IssueValue Attribute Value",
				"While creating a IssueValue value, an extra attribute value was detected. "+
					"A IssueValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IssueValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIssueValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewIssueValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewIssueValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewIssueValueUnknown(), diags
	}

	return IssueValue{
		Key:   keyVal,
		Uuid:  uuidVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewIssueValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IssueValue {
	object, diags := NewIssueValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIssueValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IssueType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIssueValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIssueValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIssueValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIssueValueMust(IssueValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IssueType) ValueType(ctx context.Context) attr.Value {
	return IssueValue{}
}

var _ basetypes.ObjectValuable = IssueValue{}

type IssueValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Uuid  basetypes.StringValue `tfsdk:"uuid"`
	state attr.ValueState
}

func (v IssueValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IssueValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IssueValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IssueValue) String() string {
	return "IssueValue"
}

func (v IssueValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":  basetypes.StringType{},
		"uuid": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":  v.Key,
			"uuid": v.Uuid,
		})

	return objVal, diags
}

func (v IssueValue) Equal(o attr.Value) bool {
	other, ok := o.(IssueValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v IssueValue) Type(ctx context.Context) attr.Type {
	return IssueType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IssueValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":  basetypes.StringType{},
		"uuid": basetypes.StringType{},
	}
}
