// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_openstack_subnet

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OpenstackSubnetDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"access_url": schema.StringAttribute{
				Computed: true,
			},
			"allocation_pools": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"end": schema.StringAttribute{
							Computed: true,
						},
						"start": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: AllocationPoolsType{
						ObjectType: types.ObjectType{
							AttrTypes: AllocationPoolsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"backend_id": schema.StringAttribute{
				Computed: true,
			},
			"cidr": schema.StringAttribute{
				Computed: true,
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"customer": schema.StringAttribute{
				Computed: true,
			},
			"customer_abbreviation": schema.StringAttribute{
				Computed: true,
			},
			"customer_name": schema.StringAttribute{
				Computed: true,
			},
			"customer_native_name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"disable_gateway": schema.BoolAttribute{
				Computed: true,
			},
			"dns_nameservers": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"enable_dhcp": schema.BoolAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_traceback": schema.StringAttribute{
				Computed: true,
			},
			"field": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"gateway_ip": schema.StringAttribute{
				Computed: true,
			},
			"host_routes": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"destination": schema.StringAttribute{
							Computed: true,
						},
						"nexthop": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: HostRoutesType{
						ObjectType: types.ObjectType{
							AttrTypes: HostRoutesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"ip_version": schema.Int64Attribute{
				Computed: true,
			},
			"is_connected": schema.BoolAttribute{
				Computed:            true,
				Description:         "Is subnet connected to the default tenant router.",
				MarkdownDescription: "Is subnet connected to the default tenant router.",
			},
			"is_limit_based": schema.BoolAttribute{
				Computed: true,
			},
			"is_usage_based": schema.BoolAttribute{
				Computed: true,
			},
			"marketplace_category_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_category_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_state": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"modified": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"network": schema.StringAttribute{
				Computed: true,
			},
			"network_name": schema.StringAttribute{
				Computed: true,
			},
			"project": schema.StringAttribute{
				Computed: true,
			},
			"project_name": schema.StringAttribute{
				Computed: true,
			},
			"project_uuid": schema.StringAttribute{
				Computed: true,
			},
			"resource_type": schema.StringAttribute{
				Computed: true,
			},
			"service_name": schema.StringAttribute{
				Computed: true,
			},
			"service_settings": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_error_message": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_state": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_uuid": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"tenant": schema.StringAttribute{
				Computed: true,
			},
			"tenant_name": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OpenstackSubnetModel struct {
	AccessUrl                   types.String `tfsdk:"access_url"`
	AllocationPools             types.List   `tfsdk:"allocation_pools"`
	BackendId                   types.String `tfsdk:"backend_id"`
	Cidr                        types.String `tfsdk:"cidr"`
	Created                     types.String `tfsdk:"created"`
	Customer                    types.String `tfsdk:"customer"`
	CustomerAbbreviation        types.String `tfsdk:"customer_abbreviation"`
	CustomerName                types.String `tfsdk:"customer_name"`
	CustomerNativeName          types.String `tfsdk:"customer_native_name"`
	Description                 types.String `tfsdk:"description"`
	DisableGateway              types.Bool   `tfsdk:"disable_gateway"`
	DnsNameservers              types.List   `tfsdk:"dns_nameservers"`
	EnableDhcp                  types.Bool   `tfsdk:"enable_dhcp"`
	ErrorMessage                types.String `tfsdk:"error_message"`
	ErrorTraceback              types.String `tfsdk:"error_traceback"`
	Field                       types.List   `tfsdk:"field"`
	GatewayIp                   types.String `tfsdk:"gateway_ip"`
	HostRoutes                  types.List   `tfsdk:"host_routes"`
	IpVersion                   types.Int64  `tfsdk:"ip_version"`
	IsConnected                 types.Bool   `tfsdk:"is_connected"`
	IsLimitBased                types.Bool   `tfsdk:"is_limit_based"`
	IsUsageBased                types.Bool   `tfsdk:"is_usage_based"`
	MarketplaceCategoryName     types.String `tfsdk:"marketplace_category_name"`
	MarketplaceCategoryUuid     types.String `tfsdk:"marketplace_category_uuid"`
	MarketplaceOfferingName     types.String `tfsdk:"marketplace_offering_name"`
	MarketplaceOfferingUuid     types.String `tfsdk:"marketplace_offering_uuid"`
	MarketplacePlanUuid         types.String `tfsdk:"marketplace_plan_uuid"`
	MarketplaceResourceState    types.String `tfsdk:"marketplace_resource_state"`
	MarketplaceResourceUuid     types.String `tfsdk:"marketplace_resource_uuid"`
	Modified                    types.String `tfsdk:"modified"`
	Name                        types.String `tfsdk:"name"`
	Network                     types.String `tfsdk:"network"`
	NetworkName                 types.String `tfsdk:"network_name"`
	Project                     types.String `tfsdk:"project"`
	ProjectName                 types.String `tfsdk:"project_name"`
	ProjectUuid                 types.String `tfsdk:"project_uuid"`
	ResourceType                types.String `tfsdk:"resource_type"`
	ServiceName                 types.String `tfsdk:"service_name"`
	ServiceSettings             types.String `tfsdk:"service_settings"`
	ServiceSettingsErrorMessage types.String `tfsdk:"service_settings_error_message"`
	ServiceSettingsState        types.String `tfsdk:"service_settings_state"`
	ServiceSettingsUuid         types.String `tfsdk:"service_settings_uuid"`
	State                       types.String `tfsdk:"state"`
	Tenant                      types.String `tfsdk:"tenant"`
	TenantName                  types.String `tfsdk:"tenant_name"`
	Url                         types.String `tfsdk:"url"`
	Uuid                        types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = AllocationPoolsType{}

type AllocationPoolsType struct {
	basetypes.ObjectType
}

func (t AllocationPoolsType) Equal(o attr.Type) bool {
	other, ok := o.(AllocationPoolsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AllocationPoolsType) String() string {
	return "AllocationPoolsType"
}

func (t AllocationPoolsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	endAttribute, ok := attributes["end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end is missing from object`)

		return nil, diags
	}

	endVal, ok := endAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end expected to be basetypes.StringValue, was: %T`, endAttribute))
	}

	startAttribute, ok := attributes["start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start is missing from object`)

		return nil, diags
	}

	startVal, ok := startAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start expected to be basetypes.StringValue, was: %T`, startAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AllocationPoolsValue{
		End:   endVal,
		Start: startVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAllocationPoolsValueNull() AllocationPoolsValue {
	return AllocationPoolsValue{
		state: attr.ValueStateNull,
	}
}

func NewAllocationPoolsValueUnknown() AllocationPoolsValue {
	return AllocationPoolsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAllocationPoolsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AllocationPoolsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AllocationPoolsValue Attribute Value",
				"While creating a AllocationPoolsValue value, a missing attribute value was detected. "+
					"A AllocationPoolsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AllocationPoolsValue Attribute Type",
				"While creating a AllocationPoolsValue value, an invalid attribute value was detected. "+
					"A AllocationPoolsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AllocationPoolsValue Attribute Value",
				"While creating a AllocationPoolsValue value, an extra attribute value was detected. "+
					"A AllocationPoolsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AllocationPoolsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAllocationPoolsValueUnknown(), diags
	}

	endAttribute, ok := attributes["end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end is missing from object`)

		return NewAllocationPoolsValueUnknown(), diags
	}

	endVal, ok := endAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end expected to be basetypes.StringValue, was: %T`, endAttribute))
	}

	startAttribute, ok := attributes["start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start is missing from object`)

		return NewAllocationPoolsValueUnknown(), diags
	}

	startVal, ok := startAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start expected to be basetypes.StringValue, was: %T`, startAttribute))
	}

	if diags.HasError() {
		return NewAllocationPoolsValueUnknown(), diags
	}

	return AllocationPoolsValue{
		End:   endVal,
		Start: startVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAllocationPoolsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AllocationPoolsValue {
	object, diags := NewAllocationPoolsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAllocationPoolsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AllocationPoolsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAllocationPoolsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAllocationPoolsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAllocationPoolsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAllocationPoolsValueMust(AllocationPoolsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AllocationPoolsType) ValueType(ctx context.Context) attr.Value {
	return AllocationPoolsValue{}
}

var _ basetypes.ObjectValuable = AllocationPoolsValue{}

type AllocationPoolsValue struct {
	End   basetypes.StringValue `tfsdk:"end"`
	Start basetypes.StringValue `tfsdk:"start"`
	state attr.ValueState
}

func (v AllocationPoolsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["end"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.End.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end"] = val

		val, err = v.Start.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AllocationPoolsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AllocationPoolsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AllocationPoolsValue) String() string {
	return "AllocationPoolsValue"
}

func (v AllocationPoolsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"end":   basetypes.StringType{},
		"start": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"end":   v.End,
			"start": v.Start,
		})

	return objVal, diags
}

func (v AllocationPoolsValue) Equal(o attr.Value) bool {
	other, ok := o.(AllocationPoolsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.End.Equal(other.End) {
		return false
	}

	if !v.Start.Equal(other.Start) {
		return false
	}

	return true
}

func (v AllocationPoolsValue) Type(ctx context.Context) attr.Type {
	return AllocationPoolsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AllocationPoolsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"end":   basetypes.StringType{},
		"start": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = HostRoutesType{}

type HostRoutesType struct {
	basetypes.ObjectType
}

func (t HostRoutesType) Equal(o attr.Type) bool {
	other, ok := o.(HostRoutesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HostRoutesType) String() string {
	return "HostRoutesType"
}

func (t HostRoutesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	destinationAttribute, ok := attributes["destination"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination is missing from object`)

		return nil, diags
	}

	destinationVal, ok := destinationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination expected to be basetypes.StringValue, was: %T`, destinationAttribute))
	}

	nexthopAttribute, ok := attributes["nexthop"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nexthop is missing from object`)

		return nil, diags
	}

	nexthopVal, ok := nexthopAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nexthop expected to be basetypes.StringValue, was: %T`, nexthopAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HostRoutesValue{
		Destination: destinationVal,
		Nexthop:     nexthopVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewHostRoutesValueNull() HostRoutesValue {
	return HostRoutesValue{
		state: attr.ValueStateNull,
	}
}

func NewHostRoutesValueUnknown() HostRoutesValue {
	return HostRoutesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHostRoutesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HostRoutesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HostRoutesValue Attribute Value",
				"While creating a HostRoutesValue value, a missing attribute value was detected. "+
					"A HostRoutesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HostRoutesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HostRoutesValue Attribute Type",
				"While creating a HostRoutesValue value, an invalid attribute value was detected. "+
					"A HostRoutesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HostRoutesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HostRoutesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HostRoutesValue Attribute Value",
				"While creating a HostRoutesValue value, an extra attribute value was detected. "+
					"A HostRoutesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HostRoutesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHostRoutesValueUnknown(), diags
	}

	destinationAttribute, ok := attributes["destination"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination is missing from object`)

		return NewHostRoutesValueUnknown(), diags
	}

	destinationVal, ok := destinationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination expected to be basetypes.StringValue, was: %T`, destinationAttribute))
	}

	nexthopAttribute, ok := attributes["nexthop"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nexthop is missing from object`)

		return NewHostRoutesValueUnknown(), diags
	}

	nexthopVal, ok := nexthopAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nexthop expected to be basetypes.StringValue, was: %T`, nexthopAttribute))
	}

	if diags.HasError() {
		return NewHostRoutesValueUnknown(), diags
	}

	return HostRoutesValue{
		Destination: destinationVal,
		Nexthop:     nexthopVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewHostRoutesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HostRoutesValue {
	object, diags := NewHostRoutesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHostRoutesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HostRoutesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHostRoutesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHostRoutesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHostRoutesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHostRoutesValueMust(HostRoutesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HostRoutesType) ValueType(ctx context.Context) attr.Value {
	return HostRoutesValue{}
}

var _ basetypes.ObjectValuable = HostRoutesValue{}

type HostRoutesValue struct {
	Destination basetypes.StringValue `tfsdk:"destination"`
	Nexthop     basetypes.StringValue `tfsdk:"nexthop"`
	state       attr.ValueState
}

func (v HostRoutesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["destination"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nexthop"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Destination.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["destination"] = val

		val, err = v.Nexthop.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nexthop"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HostRoutesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HostRoutesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HostRoutesValue) String() string {
	return "HostRoutesValue"
}

func (v HostRoutesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"destination": basetypes.StringType{},
		"nexthop":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"destination": v.Destination,
			"nexthop":     v.Nexthop,
		})

	return objVal, diags
}

func (v HostRoutesValue) Equal(o attr.Value) bool {
	other, ok := o.(HostRoutesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Destination.Equal(other.Destination) {
		return false
	}

	if !v.Nexthop.Equal(other.Nexthop) {
		return false
	}

	return true
}

func (v HostRoutesValue) Type(ctx context.Context) attr.Type {
	return HostRoutesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HostRoutesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"destination": basetypes.StringType{},
		"nexthop":     basetypes.StringType{},
	}
}
