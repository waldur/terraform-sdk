// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_openstack_network

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OpenstackNetworkDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"access_url": schema.StringAttribute{
				Computed: true,
			},
			"backend_id": schema.StringAttribute{
				Computed: true,
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"customer": schema.StringAttribute{
				Computed: true,
			},
			"customer_abbreviation": schema.StringAttribute{
				Computed: true,
			},
			"customer_name": schema.StringAttribute{
				Computed: true,
			},
			"customer_native_name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_traceback": schema.StringAttribute{
				Computed: true,
			},
			"field": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"is_external": schema.BoolAttribute{
				Computed: true,
			},
			"is_limit_based": schema.BoolAttribute{
				Computed: true,
			},
			"is_usage_based": schema.BoolAttribute{
				Computed: true,
			},
			"marketplace_category_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_category_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_name": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_plan_uuid": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_state": schema.StringAttribute{
				Computed: true,
			},
			"marketplace_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"modified": schema.StringAttribute{
				Computed: true,
			},
			"mtu": schema.Int64Attribute{
				Computed:            true,
				Description:         "The maximum transmission unit (MTU) value to address fragmentation.",
				MarkdownDescription: "The maximum transmission unit (MTU) value to address fragmentation.",
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"project": schema.StringAttribute{
				Computed: true,
			},
			"project_name": schema.StringAttribute{
				Computed: true,
			},
			"project_uuid": schema.StringAttribute{
				Computed: true,
			},
			"rbac_policies": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"backend_id": schema.StringAttribute{
							Computed: true,
						},
						"created": schema.StringAttribute{
							Computed: true,
						},
						"network": schema.StringAttribute{
							Computed: true,
						},
						"network_name": schema.StringAttribute{
							Computed: true,
						},
						"policy_type": schema.StringAttribute{
							Computed: true,
						},
						"target_tenant": schema.StringAttribute{
							Computed: true,
						},
						"target_tenant_name": schema.StringAttribute{
							Computed: true,
						},
						"url": schema.StringAttribute{
							Computed: true,
						},
						"uuid": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: RbacPoliciesType{
						ObjectType: types.ObjectType{
							AttrTypes: RbacPoliciesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"resource_type": schema.StringAttribute{
				Computed: true,
			},
			"service_name": schema.StringAttribute{
				Computed: true,
			},
			"service_settings": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_error_message": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_state": schema.StringAttribute{
				Computed: true,
			},
			"service_settings_uuid": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"subnets": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"allocation_pools": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"end": schema.StringAttribute{
										Computed: true,
									},
									"start": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: AllocationPoolsType{
									ObjectType: types.ObjectType{
										AttrTypes: AllocationPoolsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"cidr": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"enable_dhcp": schema.BoolAttribute{
							Computed: true,
						},
						"gateway_ip": schema.StringAttribute{
							Computed: true,
						},
						"ip_version": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"uuid": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: SubnetsType{
						ObjectType: types.ObjectType{
							AttrTypes: SubnetsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"tenant": schema.StringAttribute{
				Computed: true,
			},
			"tenant_name": schema.StringAttribute{
				Computed: true,
			},
			"tenant_uuid": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OpenstackNetworkModel struct {
	AccessUrl                   types.String `tfsdk:"access_url"`
	BackendId                   types.String `tfsdk:"backend_id"`
	Created                     types.String `tfsdk:"created"`
	Customer                    types.String `tfsdk:"customer"`
	CustomerAbbreviation        types.String `tfsdk:"customer_abbreviation"`
	CustomerName                types.String `tfsdk:"customer_name"`
	CustomerNativeName          types.String `tfsdk:"customer_native_name"`
	Description                 types.String `tfsdk:"description"`
	ErrorMessage                types.String `tfsdk:"error_message"`
	ErrorTraceback              types.String `tfsdk:"error_traceback"`
	Field                       types.List   `tfsdk:"field"`
	IsExternal                  types.Bool   `tfsdk:"is_external"`
	IsLimitBased                types.Bool   `tfsdk:"is_limit_based"`
	IsUsageBased                types.Bool   `tfsdk:"is_usage_based"`
	MarketplaceCategoryName     types.String `tfsdk:"marketplace_category_name"`
	MarketplaceCategoryUuid     types.String `tfsdk:"marketplace_category_uuid"`
	MarketplaceOfferingName     types.String `tfsdk:"marketplace_offering_name"`
	MarketplaceOfferingUuid     types.String `tfsdk:"marketplace_offering_uuid"`
	MarketplacePlanUuid         types.String `tfsdk:"marketplace_plan_uuid"`
	MarketplaceResourceState    types.String `tfsdk:"marketplace_resource_state"`
	MarketplaceResourceUuid     types.String `tfsdk:"marketplace_resource_uuid"`
	Modified                    types.String `tfsdk:"modified"`
	Mtu                         types.Int64  `tfsdk:"mtu"`
	Name                        types.String `tfsdk:"name"`
	Project                     types.String `tfsdk:"project"`
	ProjectName                 types.String `tfsdk:"project_name"`
	ProjectUuid                 types.String `tfsdk:"project_uuid"`
	RbacPolicies                types.List   `tfsdk:"rbac_policies"`
	ResourceType                types.String `tfsdk:"resource_type"`
	ServiceName                 types.String `tfsdk:"service_name"`
	ServiceSettings             types.String `tfsdk:"service_settings"`
	ServiceSettingsErrorMessage types.String `tfsdk:"service_settings_error_message"`
	ServiceSettingsState        types.String `tfsdk:"service_settings_state"`
	ServiceSettingsUuid         types.String `tfsdk:"service_settings_uuid"`
	State                       types.String `tfsdk:"state"`
	Subnets                     types.List   `tfsdk:"subnets"`
	Tenant                      types.String `tfsdk:"tenant"`
	TenantName                  types.String `tfsdk:"tenant_name"`
	TenantUuid                  types.String `tfsdk:"tenant_uuid"`
	Type                        types.String `tfsdk:"type"`
	Url                         types.String `tfsdk:"url"`
	Uuid                        types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = RbacPoliciesType{}

type RbacPoliciesType struct {
	basetypes.ObjectType
}

func (t RbacPoliciesType) Equal(o attr.Type) bool {
	other, ok := o.(RbacPoliciesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RbacPoliciesType) String() string {
	return "RbacPoliciesType"
}

func (t RbacPoliciesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	backendIdAttribute, ok := attributes["backend_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backend_id is missing from object`)

		return nil, diags
	}

	backendIdVal, ok := backendIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backend_id expected to be basetypes.StringValue, was: %T`, backendIdAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return nil, diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	networkAttribute, ok := attributes["network"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network is missing from object`)

		return nil, diags
	}

	networkVal, ok := networkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network expected to be basetypes.StringValue, was: %T`, networkAttribute))
	}

	networkNameAttribute, ok := attributes["network_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_name is missing from object`)

		return nil, diags
	}

	networkNameVal, ok := networkNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_name expected to be basetypes.StringValue, was: %T`, networkNameAttribute))
	}

	policyTypeAttribute, ok := attributes["policy_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy_type is missing from object`)

		return nil, diags
	}

	policyTypeVal, ok := policyTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy_type expected to be basetypes.StringValue, was: %T`, policyTypeAttribute))
	}

	targetTenantAttribute, ok := attributes["target_tenant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_tenant is missing from object`)

		return nil, diags
	}

	targetTenantVal, ok := targetTenantAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_tenant expected to be basetypes.StringValue, was: %T`, targetTenantAttribute))
	}

	targetTenantNameAttribute, ok := attributes["target_tenant_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_tenant_name is missing from object`)

		return nil, diags
	}

	targetTenantNameVal, ok := targetTenantNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_tenant_name expected to be basetypes.StringValue, was: %T`, targetTenantNameAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RbacPoliciesValue{
		BackendId:        backendIdVal,
		Created:          createdVal,
		Network:          networkVal,
		NetworkName:      networkNameVal,
		PolicyType:       policyTypeVal,
		TargetTenant:     targetTenantVal,
		TargetTenantName: targetTenantNameVal,
		Url:              urlVal,
		Uuid:             uuidVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewRbacPoliciesValueNull() RbacPoliciesValue {
	return RbacPoliciesValue{
		state: attr.ValueStateNull,
	}
}

func NewRbacPoliciesValueUnknown() RbacPoliciesValue {
	return RbacPoliciesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRbacPoliciesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RbacPoliciesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RbacPoliciesValue Attribute Value",
				"While creating a RbacPoliciesValue value, a missing attribute value was detected. "+
					"A RbacPoliciesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RbacPoliciesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RbacPoliciesValue Attribute Type",
				"While creating a RbacPoliciesValue value, an invalid attribute value was detected. "+
					"A RbacPoliciesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RbacPoliciesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RbacPoliciesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RbacPoliciesValue Attribute Value",
				"While creating a RbacPoliciesValue value, an extra attribute value was detected. "+
					"A RbacPoliciesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RbacPoliciesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRbacPoliciesValueUnknown(), diags
	}

	backendIdAttribute, ok := attributes["backend_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backend_id is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	backendIdVal, ok := backendIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backend_id expected to be basetypes.StringValue, was: %T`, backendIdAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	networkAttribute, ok := attributes["network"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	networkVal, ok := networkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network expected to be basetypes.StringValue, was: %T`, networkAttribute))
	}

	networkNameAttribute, ok := attributes["network_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_name is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	networkNameVal, ok := networkNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_name expected to be basetypes.StringValue, was: %T`, networkNameAttribute))
	}

	policyTypeAttribute, ok := attributes["policy_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy_type is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	policyTypeVal, ok := policyTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy_type expected to be basetypes.StringValue, was: %T`, policyTypeAttribute))
	}

	targetTenantAttribute, ok := attributes["target_tenant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_tenant is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	targetTenantVal, ok := targetTenantAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_tenant expected to be basetypes.StringValue, was: %T`, targetTenantAttribute))
	}

	targetTenantNameAttribute, ok := attributes["target_tenant_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_tenant_name is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	targetTenantNameVal, ok := targetTenantNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_tenant_name expected to be basetypes.StringValue, was: %T`, targetTenantNameAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewRbacPoliciesValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewRbacPoliciesValueUnknown(), diags
	}

	return RbacPoliciesValue{
		BackendId:        backendIdVal,
		Created:          createdVal,
		Network:          networkVal,
		NetworkName:      networkNameVal,
		PolicyType:       policyTypeVal,
		TargetTenant:     targetTenantVal,
		TargetTenantName: targetTenantNameVal,
		Url:              urlVal,
		Uuid:             uuidVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewRbacPoliciesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RbacPoliciesValue {
	object, diags := NewRbacPoliciesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRbacPoliciesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RbacPoliciesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRbacPoliciesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRbacPoliciesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRbacPoliciesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRbacPoliciesValueMust(RbacPoliciesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RbacPoliciesType) ValueType(ctx context.Context) attr.Value {
	return RbacPoliciesValue{}
}

var _ basetypes.ObjectValuable = RbacPoliciesValue{}

type RbacPoliciesValue struct {
	BackendId        basetypes.StringValue `tfsdk:"backend_id"`
	Created          basetypes.StringValue `tfsdk:"created"`
	Network          basetypes.StringValue `tfsdk:"network"`
	NetworkName      basetypes.StringValue `tfsdk:"network_name"`
	PolicyType       basetypes.StringValue `tfsdk:"policy_type"`
	TargetTenant     basetypes.StringValue `tfsdk:"target_tenant"`
	TargetTenantName basetypes.StringValue `tfsdk:"target_tenant_name"`
	Url              basetypes.StringValue `tfsdk:"url"`
	Uuid             basetypes.StringValue `tfsdk:"uuid"`
	state            attr.ValueState
}

func (v RbacPoliciesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["backend_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["policy_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["target_tenant"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["target_tenant_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.BackendId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["backend_id"] = val

		val, err = v.Created.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created"] = val

		val, err = v.Network.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network"] = val

		val, err = v.NetworkName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_name"] = val

		val, err = v.PolicyType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["policy_type"] = val

		val, err = v.TargetTenant.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target_tenant"] = val

		val, err = v.TargetTenantName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target_tenant_name"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RbacPoliciesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RbacPoliciesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RbacPoliciesValue) String() string {
	return "RbacPoliciesValue"
}

func (v RbacPoliciesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"backend_id":         basetypes.StringType{},
		"created":            basetypes.StringType{},
		"network":            basetypes.StringType{},
		"network_name":       basetypes.StringType{},
		"policy_type":        basetypes.StringType{},
		"target_tenant":      basetypes.StringType{},
		"target_tenant_name": basetypes.StringType{},
		"url":                basetypes.StringType{},
		"uuid":               basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"backend_id":         v.BackendId,
			"created":            v.Created,
			"network":            v.Network,
			"network_name":       v.NetworkName,
			"policy_type":        v.PolicyType,
			"target_tenant":      v.TargetTenant,
			"target_tenant_name": v.TargetTenantName,
			"url":                v.Url,
			"uuid":               v.Uuid,
		})

	return objVal, diags
}

func (v RbacPoliciesValue) Equal(o attr.Value) bool {
	other, ok := o.(RbacPoliciesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BackendId.Equal(other.BackendId) {
		return false
	}

	if !v.Created.Equal(other.Created) {
		return false
	}

	if !v.Network.Equal(other.Network) {
		return false
	}

	if !v.NetworkName.Equal(other.NetworkName) {
		return false
	}

	if !v.PolicyType.Equal(other.PolicyType) {
		return false
	}

	if !v.TargetTenant.Equal(other.TargetTenant) {
		return false
	}

	if !v.TargetTenantName.Equal(other.TargetTenantName) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v RbacPoliciesValue) Type(ctx context.Context) attr.Type {
	return RbacPoliciesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RbacPoliciesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"backend_id":         basetypes.StringType{},
		"created":            basetypes.StringType{},
		"network":            basetypes.StringType{},
		"network_name":       basetypes.StringType{},
		"policy_type":        basetypes.StringType{},
		"target_tenant":      basetypes.StringType{},
		"target_tenant_name": basetypes.StringType{},
		"url":                basetypes.StringType{},
		"uuid":               basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SubnetsType{}

type SubnetsType struct {
	basetypes.ObjectType
}

func (t SubnetsType) Equal(o attr.Type) bool {
	other, ok := o.(SubnetsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SubnetsType) String() string {
	return "SubnetsType"
}

func (t SubnetsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allocationPoolsAttribute, ok := attributes["allocation_pools"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allocation_pools is missing from object`)

		return nil, diags
	}

	allocationPoolsVal, ok := allocationPoolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allocation_pools expected to be basetypes.ListValue, was: %T`, allocationPoolsAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return nil, diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enableDhcpAttribute, ok := attributes["enable_dhcp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_dhcp is missing from object`)

		return nil, diags
	}

	enableDhcpVal, ok := enableDhcpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_dhcp expected to be basetypes.BoolValue, was: %T`, enableDhcpAttribute))
	}

	gatewayIpAttribute, ok := attributes["gateway_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_ip is missing from object`)

		return nil, diags
	}

	gatewayIpVal, ok := gatewayIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_ip expected to be basetypes.StringValue, was: %T`, gatewayIpAttribute))
	}

	ipVersionAttribute, ok := attributes["ip_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_version is missing from object`)

		return nil, diags
	}

	ipVersionVal, ok := ipVersionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_version expected to be basetypes.Int64Value, was: %T`, ipVersionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SubnetsValue{
		AllocationPools: allocationPoolsVal,
		Cidr:            cidrVal,
		Description:     descriptionVal,
		EnableDhcp:      enableDhcpVal,
		GatewayIp:       gatewayIpVal,
		IpVersion:       ipVersionVal,
		Name:            nameVal,
		Uuid:            uuidVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSubnetsValueNull() SubnetsValue {
	return SubnetsValue{
		state: attr.ValueStateNull,
	}
}

func NewSubnetsValueUnknown() SubnetsValue {
	return SubnetsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSubnetsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SubnetsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SubnetsValue Attribute Value",
				"While creating a SubnetsValue value, a missing attribute value was detected. "+
					"A SubnetsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SubnetsValue Attribute Type",
				"While creating a SubnetsValue value, an invalid attribute value was detected. "+
					"A SubnetsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SubnetsValue Attribute Value",
				"While creating a SubnetsValue value, an extra attribute value was detected. "+
					"A SubnetsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SubnetsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSubnetsValueUnknown(), diags
	}

	allocationPoolsAttribute, ok := attributes["allocation_pools"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allocation_pools is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	allocationPoolsVal, ok := allocationPoolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allocation_pools expected to be basetypes.ListValue, was: %T`, allocationPoolsAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enableDhcpAttribute, ok := attributes["enable_dhcp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_dhcp is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	enableDhcpVal, ok := enableDhcpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_dhcp expected to be basetypes.BoolValue, was: %T`, enableDhcpAttribute))
	}

	gatewayIpAttribute, ok := attributes["gateway_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_ip is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	gatewayIpVal, ok := gatewayIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_ip expected to be basetypes.StringValue, was: %T`, gatewayIpAttribute))
	}

	ipVersionAttribute, ok := attributes["ip_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_version is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	ipVersionVal, ok := ipVersionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_version expected to be basetypes.Int64Value, was: %T`, ipVersionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewSubnetsValueUnknown(), diags
	}

	return SubnetsValue{
		AllocationPools: allocationPoolsVal,
		Cidr:            cidrVal,
		Description:     descriptionVal,
		EnableDhcp:      enableDhcpVal,
		GatewayIp:       gatewayIpVal,
		IpVersion:       ipVersionVal,
		Name:            nameVal,
		Uuid:            uuidVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSubnetsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SubnetsValue {
	object, diags := NewSubnetsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSubnetsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SubnetsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSubnetsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSubnetsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSubnetsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSubnetsValueMust(SubnetsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SubnetsType) ValueType(ctx context.Context) attr.Value {
	return SubnetsValue{}
}

var _ basetypes.ObjectValuable = SubnetsValue{}

type SubnetsValue struct {
	AllocationPools basetypes.ListValue   `tfsdk:"allocation_pools"`
	Cidr            basetypes.StringValue `tfsdk:"cidr"`
	Description     basetypes.StringValue `tfsdk:"description"`
	EnableDhcp      basetypes.BoolValue   `tfsdk:"enable_dhcp"`
	GatewayIp       basetypes.StringValue `tfsdk:"gateway_ip"`
	IpVersion       basetypes.Int64Value  `tfsdk:"ip_version"`
	Name            basetypes.StringValue `tfsdk:"name"`
	Uuid            basetypes.StringValue `tfsdk:"uuid"`
	state           attr.ValueState
}

func (v SubnetsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["allocation_pools"] = basetypes.ListType{
		ElemType: AllocationPoolsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["cidr"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enable_dhcp"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["gateway_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_version"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.AllocationPools.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allocation_pools"] = val

		val, err = v.Cidr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cidr"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.EnableDhcp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enable_dhcp"] = val

		val, err = v.GatewayIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gateway_ip"] = val

		val, err = v.IpVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_version"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SubnetsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SubnetsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SubnetsValue) String() string {
	return "SubnetsValue"
}

func (v SubnetsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	allocationPools := types.ListValueMust(
		AllocationPoolsType{
			basetypes.ObjectType{
				AttrTypes: AllocationPoolsValue{}.AttributeTypes(ctx),
			},
		},
		v.AllocationPools.Elements(),
	)

	if v.AllocationPools.IsNull() {
		allocationPools = types.ListNull(
			AllocationPoolsType{
				basetypes.ObjectType{
					AttrTypes: AllocationPoolsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.AllocationPools.IsUnknown() {
		allocationPools = types.ListUnknown(
			AllocationPoolsType{
				basetypes.ObjectType{
					AttrTypes: AllocationPoolsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"allocation_pools": basetypes.ListType{
			ElemType: AllocationPoolsValue{}.Type(ctx),
		},
		"cidr":        basetypes.StringType{},
		"description": basetypes.StringType{},
		"enable_dhcp": basetypes.BoolType{},
		"gateway_ip":  basetypes.StringType{},
		"ip_version":  basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"uuid":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allocation_pools": allocationPools,
			"cidr":             v.Cidr,
			"description":      v.Description,
			"enable_dhcp":      v.EnableDhcp,
			"gateway_ip":       v.GatewayIp,
			"ip_version":       v.IpVersion,
			"name":             v.Name,
			"uuid":             v.Uuid,
		})

	return objVal, diags
}

func (v SubnetsValue) Equal(o attr.Value) bool {
	other, ok := o.(SubnetsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllocationPools.Equal(other.AllocationPools) {
		return false
	}

	if !v.Cidr.Equal(other.Cidr) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.EnableDhcp.Equal(other.EnableDhcp) {
		return false
	}

	if !v.GatewayIp.Equal(other.GatewayIp) {
		return false
	}

	if !v.IpVersion.Equal(other.IpVersion) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v SubnetsValue) Type(ctx context.Context) attr.Type {
	return SubnetsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SubnetsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allocation_pools": basetypes.ListType{
			ElemType: AllocationPoolsValue{}.Type(ctx),
		},
		"cidr":        basetypes.StringType{},
		"description": basetypes.StringType{},
		"enable_dhcp": basetypes.BoolType{},
		"gateway_ip":  basetypes.StringType{},
		"ip_version":  basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"uuid":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AllocationPoolsType{}

type AllocationPoolsType struct {
	basetypes.ObjectType
}

func (t AllocationPoolsType) Equal(o attr.Type) bool {
	other, ok := o.(AllocationPoolsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AllocationPoolsType) String() string {
	return "AllocationPoolsType"
}

func (t AllocationPoolsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	endAttribute, ok := attributes["end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end is missing from object`)

		return nil, diags
	}

	endVal, ok := endAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end expected to be basetypes.StringValue, was: %T`, endAttribute))
	}

	startAttribute, ok := attributes["start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start is missing from object`)

		return nil, diags
	}

	startVal, ok := startAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start expected to be basetypes.StringValue, was: %T`, startAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AllocationPoolsValue{
		End:   endVal,
		Start: startVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAllocationPoolsValueNull() AllocationPoolsValue {
	return AllocationPoolsValue{
		state: attr.ValueStateNull,
	}
}

func NewAllocationPoolsValueUnknown() AllocationPoolsValue {
	return AllocationPoolsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAllocationPoolsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AllocationPoolsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AllocationPoolsValue Attribute Value",
				"While creating a AllocationPoolsValue value, a missing attribute value was detected. "+
					"A AllocationPoolsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AllocationPoolsValue Attribute Type",
				"While creating a AllocationPoolsValue value, an invalid attribute value was detected. "+
					"A AllocationPoolsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AllocationPoolsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AllocationPoolsValue Attribute Value",
				"While creating a AllocationPoolsValue value, an extra attribute value was detected. "+
					"A AllocationPoolsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AllocationPoolsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAllocationPoolsValueUnknown(), diags
	}

	endAttribute, ok := attributes["end"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end is missing from object`)

		return NewAllocationPoolsValueUnknown(), diags
	}

	endVal, ok := endAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end expected to be basetypes.StringValue, was: %T`, endAttribute))
	}

	startAttribute, ok := attributes["start"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start is missing from object`)

		return NewAllocationPoolsValueUnknown(), diags
	}

	startVal, ok := startAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start expected to be basetypes.StringValue, was: %T`, startAttribute))
	}

	if diags.HasError() {
		return NewAllocationPoolsValueUnknown(), diags
	}

	return AllocationPoolsValue{
		End:   endVal,
		Start: startVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAllocationPoolsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AllocationPoolsValue {
	object, diags := NewAllocationPoolsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAllocationPoolsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AllocationPoolsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAllocationPoolsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAllocationPoolsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAllocationPoolsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAllocationPoolsValueMust(AllocationPoolsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AllocationPoolsType) ValueType(ctx context.Context) attr.Value {
	return AllocationPoolsValue{}
}

var _ basetypes.ObjectValuable = AllocationPoolsValue{}

type AllocationPoolsValue struct {
	End   basetypes.StringValue `tfsdk:"end"`
	Start basetypes.StringValue `tfsdk:"start"`
	state attr.ValueState
}

func (v AllocationPoolsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["end"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.End.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end"] = val

		val, err = v.Start.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AllocationPoolsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AllocationPoolsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AllocationPoolsValue) String() string {
	return "AllocationPoolsValue"
}

func (v AllocationPoolsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"end":   basetypes.StringType{},
		"start": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"end":   v.End,
			"start": v.Start,
		})

	return objVal, diags
}

func (v AllocationPoolsValue) Equal(o attr.Value) bool {
	other, ok := o.(AllocationPoolsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.End.Equal(other.End) {
		return false
	}

	if !v.Start.Equal(other.Start) {
		return false
	}

	return true
}

func (v AllocationPoolsValue) Type(ctx context.Context) attr.Type {
	return AllocationPoolsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AllocationPoolsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"end":   basetypes.StringType{},
		"start": basetypes.StringType{},
	}
}
