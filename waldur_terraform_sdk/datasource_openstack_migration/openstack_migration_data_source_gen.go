// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_openstack_migration

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OpenstackMigrationDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created": schema.StringAttribute{
				Computed: true,
			},
			"created_by_full_name": schema.StringAttribute{
				Computed: true,
			},
			"created_by_uuid": schema.StringAttribute{
				Computed: true,
			},
			"dst_offering_name": schema.StringAttribute{
				Computed: true,
			},
			"dst_offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"dst_resource_name": schema.StringAttribute{
				Computed: true,
			},
			"dst_resource_state": schema.StringAttribute{
				Computed: true,
			},
			"dst_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_traceback": schema.StringAttribute{
				Computed: true,
			},
			"mappings": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"networks": schema.ListAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"skip_connection_extnet": schema.BoolAttribute{
						Computed: true,
					},
					"subnets": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"dst_cidr": schema.StringAttribute{
									Computed: true,
								},
								"src_cidr": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: SubnetsType{
								ObjectType: types.ObjectType{
									AttrTypes: SubnetsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed: true,
					},
					"sync_instance_ports": schema.BoolAttribute{
						Computed: true,
					},
					"volume_types": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"dst_type_uuid": schema.StringAttribute{
									Computed: true,
								},
								"src_type_uuid": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: VolumeTypesType{
								ObjectType: types.ObjectType{
									AttrTypes: VolumeTypesValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed: true,
					},
				},
				CustomType: MappingsType{
					ObjectType: types.ObjectType{
						AttrTypes: MappingsValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"modified": schema.StringAttribute{
				Computed: true,
			},
			"src_offering_name": schema.StringAttribute{
				Computed: true,
			},
			"src_offering_uuid": schema.StringAttribute{
				Computed: true,
			},
			"src_resource_name": schema.StringAttribute{
				Computed: true,
			},
			"src_resource_uuid": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OpenstackMigrationModel struct {
	Created           types.String  `tfsdk:"created"`
	CreatedByFullName types.String  `tfsdk:"created_by_full_name"`
	CreatedByUuid     types.String  `tfsdk:"created_by_uuid"`
	DstOfferingName   types.String  `tfsdk:"dst_offering_name"`
	DstOfferingUuid   types.String  `tfsdk:"dst_offering_uuid"`
	DstResourceName   types.String  `tfsdk:"dst_resource_name"`
	DstResourceState  types.String  `tfsdk:"dst_resource_state"`
	DstResourceUuid   types.String  `tfsdk:"dst_resource_uuid"`
	ErrorMessage      types.String  `tfsdk:"error_message"`
	ErrorTraceback    types.String  `tfsdk:"error_traceback"`
	Mappings          MappingsValue `tfsdk:"mappings"`
	Modified          types.String  `tfsdk:"modified"`
	SrcOfferingName   types.String  `tfsdk:"src_offering_name"`
	SrcOfferingUuid   types.String  `tfsdk:"src_offering_uuid"`
	SrcResourceName   types.String  `tfsdk:"src_resource_name"`
	SrcResourceUuid   types.String  `tfsdk:"src_resource_uuid"`
	State             types.String  `tfsdk:"state"`
	Uuid              types.String  `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = MappingsType{}

type MappingsType struct {
	basetypes.ObjectType
}

func (t MappingsType) Equal(o attr.Type) bool {
	other, ok := o.(MappingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MappingsType) String() string {
	return "MappingsType"
}

func (t MappingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	networksAttribute, ok := attributes["networks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`networks is missing from object`)

		return nil, diags
	}

	networksVal, ok := networksAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`networks expected to be basetypes.ListValue, was: %T`, networksAttribute))
	}

	skipConnectionExtnetAttribute, ok := attributes["skip_connection_extnet"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_connection_extnet is missing from object`)

		return nil, diags
	}

	skipConnectionExtnetVal, ok := skipConnectionExtnetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_connection_extnet expected to be basetypes.BoolValue, was: %T`, skipConnectionExtnetAttribute))
	}

	subnetsAttribute, ok := attributes["subnets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnets is missing from object`)

		return nil, diags
	}

	subnetsVal, ok := subnetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnets expected to be basetypes.ListValue, was: %T`, subnetsAttribute))
	}

	syncInstancePortsAttribute, ok := attributes["sync_instance_ports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sync_instance_ports is missing from object`)

		return nil, diags
	}

	syncInstancePortsVal, ok := syncInstancePortsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sync_instance_ports expected to be basetypes.BoolValue, was: %T`, syncInstancePortsAttribute))
	}

	volumeTypesAttribute, ok := attributes["volume_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_types is missing from object`)

		return nil, diags
	}

	volumeTypesVal, ok := volumeTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_types expected to be basetypes.ListValue, was: %T`, volumeTypesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MappingsValue{
		Networks:             networksVal,
		SkipConnectionExtnet: skipConnectionExtnetVal,
		Subnets:              subnetsVal,
		SyncInstancePorts:    syncInstancePortsVal,
		VolumeTypes:          volumeTypesVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMappingsValueNull() MappingsValue {
	return MappingsValue{
		state: attr.ValueStateNull,
	}
}

func NewMappingsValueUnknown() MappingsValue {
	return MappingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMappingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MappingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MappingsValue Attribute Value",
				"While creating a MappingsValue value, a missing attribute value was detected. "+
					"A MappingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MappingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MappingsValue Attribute Type",
				"While creating a MappingsValue value, an invalid attribute value was detected. "+
					"A MappingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MappingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MappingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MappingsValue Attribute Value",
				"While creating a MappingsValue value, an extra attribute value was detected. "+
					"A MappingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MappingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMappingsValueUnknown(), diags
	}

	networksAttribute, ok := attributes["networks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`networks is missing from object`)

		return NewMappingsValueUnknown(), diags
	}

	networksVal, ok := networksAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`networks expected to be basetypes.ListValue, was: %T`, networksAttribute))
	}

	skipConnectionExtnetAttribute, ok := attributes["skip_connection_extnet"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_connection_extnet is missing from object`)

		return NewMappingsValueUnknown(), diags
	}

	skipConnectionExtnetVal, ok := skipConnectionExtnetAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_connection_extnet expected to be basetypes.BoolValue, was: %T`, skipConnectionExtnetAttribute))
	}

	subnetsAttribute, ok := attributes["subnets"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnets is missing from object`)

		return NewMappingsValueUnknown(), diags
	}

	subnetsVal, ok := subnetsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnets expected to be basetypes.ListValue, was: %T`, subnetsAttribute))
	}

	syncInstancePortsAttribute, ok := attributes["sync_instance_ports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sync_instance_ports is missing from object`)

		return NewMappingsValueUnknown(), diags
	}

	syncInstancePortsVal, ok := syncInstancePortsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sync_instance_ports expected to be basetypes.BoolValue, was: %T`, syncInstancePortsAttribute))
	}

	volumeTypesAttribute, ok := attributes["volume_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_types is missing from object`)

		return NewMappingsValueUnknown(), diags
	}

	volumeTypesVal, ok := volumeTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_types expected to be basetypes.ListValue, was: %T`, volumeTypesAttribute))
	}

	if diags.HasError() {
		return NewMappingsValueUnknown(), diags
	}

	return MappingsValue{
		Networks:             networksVal,
		SkipConnectionExtnet: skipConnectionExtnetVal,
		Subnets:              subnetsVal,
		SyncInstancePorts:    syncInstancePortsVal,
		VolumeTypes:          volumeTypesVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewMappingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MappingsValue {
	object, diags := NewMappingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMappingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MappingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMappingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMappingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMappingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMappingsValueMust(MappingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MappingsType) ValueType(ctx context.Context) attr.Value {
	return MappingsValue{}
}

var _ basetypes.ObjectValuable = MappingsValue{}

type MappingsValue struct {
	Networks             basetypes.ListValue `tfsdk:"networks"`
	SkipConnectionExtnet basetypes.BoolValue `tfsdk:"skip_connection_extnet"`
	Subnets              basetypes.ListValue `tfsdk:"subnets"`
	SyncInstancePorts    basetypes.BoolValue `tfsdk:"sync_instance_ports"`
	VolumeTypes          basetypes.ListValue `tfsdk:"volume_types"`
	state                attr.ValueState
}

func (v MappingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["networks"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["skip_connection_extnet"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["subnets"] = basetypes.ListType{
		ElemType: SubnetsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["sync_instance_ports"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["volume_types"] = basetypes.ListType{
		ElemType: VolumeTypesValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Networks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["networks"] = val

		val, err = v.SkipConnectionExtnet.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_connection_extnet"] = val

		val, err = v.Subnets.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnets"] = val

		val, err = v.SyncInstancePorts.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sync_instance_ports"] = val

		val, err = v.VolumeTypes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_types"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MappingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MappingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MappingsValue) String() string {
	return "MappingsValue"
}

func (v MappingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	subnets := types.ListValueMust(
		SubnetsType{
			basetypes.ObjectType{
				AttrTypes: SubnetsValue{}.AttributeTypes(ctx),
			},
		},
		v.Subnets.Elements(),
	)

	if v.Subnets.IsNull() {
		subnets = types.ListNull(
			SubnetsType{
				basetypes.ObjectType{
					AttrTypes: SubnetsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Subnets.IsUnknown() {
		subnets = types.ListUnknown(
			SubnetsType{
				basetypes.ObjectType{
					AttrTypes: SubnetsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	volumeTypes := types.ListValueMust(
		VolumeTypesType{
			basetypes.ObjectType{
				AttrTypes: VolumeTypesValue{}.AttributeTypes(ctx),
			},
		},
		v.VolumeTypes.Elements(),
	)

	if v.VolumeTypes.IsNull() {
		volumeTypes = types.ListNull(
			VolumeTypesType{
				basetypes.ObjectType{
					AttrTypes: VolumeTypesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.VolumeTypes.IsUnknown() {
		volumeTypes = types.ListUnknown(
			VolumeTypesType{
				basetypes.ObjectType{
					AttrTypes: VolumeTypesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var networksVal basetypes.ListValue
	switch {
	case v.Networks.IsUnknown():
		networksVal = types.ListUnknown(types.StringType)
	case v.Networks.IsNull():
		networksVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		networksVal, d = types.ListValue(types.StringType, v.Networks.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"networks": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skip_connection_extnet": basetypes.BoolType{},
			"subnets": basetypes.ListType{
				ElemType: SubnetsValue{}.Type(ctx),
			},
			"sync_instance_ports": basetypes.BoolType{},
			"volume_types": basetypes.ListType{
				ElemType: VolumeTypesValue{}.Type(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"networks": basetypes.ListType{
			ElemType: types.StringType,
		},
		"skip_connection_extnet": basetypes.BoolType{},
		"subnets": basetypes.ListType{
			ElemType: SubnetsValue{}.Type(ctx),
		},
		"sync_instance_ports": basetypes.BoolType{},
		"volume_types": basetypes.ListType{
			ElemType: VolumeTypesValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"networks":               networksVal,
			"skip_connection_extnet": v.SkipConnectionExtnet,
			"subnets":                subnets,
			"sync_instance_ports":    v.SyncInstancePorts,
			"volume_types":           volumeTypes,
		})

	return objVal, diags
}

func (v MappingsValue) Equal(o attr.Value) bool {
	other, ok := o.(MappingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Networks.Equal(other.Networks) {
		return false
	}

	if !v.SkipConnectionExtnet.Equal(other.SkipConnectionExtnet) {
		return false
	}

	if !v.Subnets.Equal(other.Subnets) {
		return false
	}

	if !v.SyncInstancePorts.Equal(other.SyncInstancePorts) {
		return false
	}

	if !v.VolumeTypes.Equal(other.VolumeTypes) {
		return false
	}

	return true
}

func (v MappingsValue) Type(ctx context.Context) attr.Type {
	return MappingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MappingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"networks": basetypes.ListType{
			ElemType: types.StringType,
		},
		"skip_connection_extnet": basetypes.BoolType{},
		"subnets": basetypes.ListType{
			ElemType: SubnetsValue{}.Type(ctx),
		},
		"sync_instance_ports": basetypes.BoolType{},
		"volume_types": basetypes.ListType{
			ElemType: VolumeTypesValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = SubnetsType{}

type SubnetsType struct {
	basetypes.ObjectType
}

func (t SubnetsType) Equal(o attr.Type) bool {
	other, ok := o.(SubnetsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SubnetsType) String() string {
	return "SubnetsType"
}

func (t SubnetsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dstCidrAttribute, ok := attributes["dst_cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_cidr is missing from object`)

		return nil, diags
	}

	dstCidrVal, ok := dstCidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_cidr expected to be basetypes.StringValue, was: %T`, dstCidrAttribute))
	}

	srcCidrAttribute, ok := attributes["src_cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_cidr is missing from object`)

		return nil, diags
	}

	srcCidrVal, ok := srcCidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_cidr expected to be basetypes.StringValue, was: %T`, srcCidrAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SubnetsValue{
		DstCidr: dstCidrVal,
		SrcCidr: srcCidrVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSubnetsValueNull() SubnetsValue {
	return SubnetsValue{
		state: attr.ValueStateNull,
	}
}

func NewSubnetsValueUnknown() SubnetsValue {
	return SubnetsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSubnetsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SubnetsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SubnetsValue Attribute Value",
				"While creating a SubnetsValue value, a missing attribute value was detected. "+
					"A SubnetsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SubnetsValue Attribute Type",
				"While creating a SubnetsValue value, an invalid attribute value was detected. "+
					"A SubnetsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SubnetsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SubnetsValue Attribute Value",
				"While creating a SubnetsValue value, an extra attribute value was detected. "+
					"A SubnetsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SubnetsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSubnetsValueUnknown(), diags
	}

	dstCidrAttribute, ok := attributes["dst_cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_cidr is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	dstCidrVal, ok := dstCidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_cidr expected to be basetypes.StringValue, was: %T`, dstCidrAttribute))
	}

	srcCidrAttribute, ok := attributes["src_cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_cidr is missing from object`)

		return NewSubnetsValueUnknown(), diags
	}

	srcCidrVal, ok := srcCidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_cidr expected to be basetypes.StringValue, was: %T`, srcCidrAttribute))
	}

	if diags.HasError() {
		return NewSubnetsValueUnknown(), diags
	}

	return SubnetsValue{
		DstCidr: dstCidrVal,
		SrcCidr: srcCidrVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSubnetsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SubnetsValue {
	object, diags := NewSubnetsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSubnetsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SubnetsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSubnetsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSubnetsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSubnetsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSubnetsValueMust(SubnetsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SubnetsType) ValueType(ctx context.Context) attr.Value {
	return SubnetsValue{}
}

var _ basetypes.ObjectValuable = SubnetsValue{}

type SubnetsValue struct {
	DstCidr basetypes.StringValue `tfsdk:"dst_cidr"`
	SrcCidr basetypes.StringValue `tfsdk:"src_cidr"`
	state   attr.ValueState
}

func (v SubnetsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["dst_cidr"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_cidr"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.DstCidr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_cidr"] = val

		val, err = v.SrcCidr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_cidr"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SubnetsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SubnetsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SubnetsValue) String() string {
	return "SubnetsValue"
}

func (v SubnetsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"dst_cidr": basetypes.StringType{},
		"src_cidr": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"dst_cidr": v.DstCidr,
			"src_cidr": v.SrcCidr,
		})

	return objVal, diags
}

func (v SubnetsValue) Equal(o attr.Value) bool {
	other, ok := o.(SubnetsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DstCidr.Equal(other.DstCidr) {
		return false
	}

	if !v.SrcCidr.Equal(other.SrcCidr) {
		return false
	}

	return true
}

func (v SubnetsValue) Type(ctx context.Context) attr.Type {
	return SubnetsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SubnetsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"dst_cidr": basetypes.StringType{},
		"src_cidr": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = VolumeTypesType{}

type VolumeTypesType struct {
	basetypes.ObjectType
}

func (t VolumeTypesType) Equal(o attr.Type) bool {
	other, ok := o.(VolumeTypesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VolumeTypesType) String() string {
	return "VolumeTypesType"
}

func (t VolumeTypesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dstTypeUuidAttribute, ok := attributes["dst_type_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_type_uuid is missing from object`)

		return nil, diags
	}

	dstTypeUuidVal, ok := dstTypeUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_type_uuid expected to be basetypes.StringValue, was: %T`, dstTypeUuidAttribute))
	}

	srcTypeUuidAttribute, ok := attributes["src_type_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_type_uuid is missing from object`)

		return nil, diags
	}

	srcTypeUuidVal, ok := srcTypeUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_type_uuid expected to be basetypes.StringValue, was: %T`, srcTypeUuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VolumeTypesValue{
		DstTypeUuid: dstTypeUuidVal,
		SrcTypeUuid: srcTypeUuidVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVolumeTypesValueNull() VolumeTypesValue {
	return VolumeTypesValue{
		state: attr.ValueStateNull,
	}
}

func NewVolumeTypesValueUnknown() VolumeTypesValue {
	return VolumeTypesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVolumeTypesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VolumeTypesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VolumeTypesValue Attribute Value",
				"While creating a VolumeTypesValue value, a missing attribute value was detected. "+
					"A VolumeTypesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeTypesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VolumeTypesValue Attribute Type",
				"While creating a VolumeTypesValue value, an invalid attribute value was detected. "+
					"A VolumeTypesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeTypesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VolumeTypesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VolumeTypesValue Attribute Value",
				"While creating a VolumeTypesValue value, an extra attribute value was detected. "+
					"A VolumeTypesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VolumeTypesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVolumeTypesValueUnknown(), diags
	}

	dstTypeUuidAttribute, ok := attributes["dst_type_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_type_uuid is missing from object`)

		return NewVolumeTypesValueUnknown(), diags
	}

	dstTypeUuidVal, ok := dstTypeUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_type_uuid expected to be basetypes.StringValue, was: %T`, dstTypeUuidAttribute))
	}

	srcTypeUuidAttribute, ok := attributes["src_type_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_type_uuid is missing from object`)

		return NewVolumeTypesValueUnknown(), diags
	}

	srcTypeUuidVal, ok := srcTypeUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_type_uuid expected to be basetypes.StringValue, was: %T`, srcTypeUuidAttribute))
	}

	if diags.HasError() {
		return NewVolumeTypesValueUnknown(), diags
	}

	return VolumeTypesValue{
		DstTypeUuid: dstTypeUuidVal,
		SrcTypeUuid: srcTypeUuidVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVolumeTypesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VolumeTypesValue {
	object, diags := NewVolumeTypesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVolumeTypesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VolumeTypesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVolumeTypesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVolumeTypesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVolumeTypesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVolumeTypesValueMust(VolumeTypesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VolumeTypesType) ValueType(ctx context.Context) attr.Value {
	return VolumeTypesValue{}
}

var _ basetypes.ObjectValuable = VolumeTypesValue{}

type VolumeTypesValue struct {
	DstTypeUuid basetypes.StringValue `tfsdk:"dst_type_uuid"`
	SrcTypeUuid basetypes.StringValue `tfsdk:"src_type_uuid"`
	state       attr.ValueState
}

func (v VolumeTypesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["dst_type_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_type_uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.DstTypeUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_type_uuid"] = val

		val, err = v.SrcTypeUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_type_uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VolumeTypesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VolumeTypesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VolumeTypesValue) String() string {
	return "VolumeTypesValue"
}

func (v VolumeTypesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"dst_type_uuid": basetypes.StringType{},
		"src_type_uuid": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"dst_type_uuid": v.DstTypeUuid,
			"src_type_uuid": v.SrcTypeUuid,
		})

	return objVal, diags
}

func (v VolumeTypesValue) Equal(o attr.Value) bool {
	other, ok := o.(VolumeTypesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DstTypeUuid.Equal(other.DstTypeUuid) {
		return false
	}

	if !v.SrcTypeUuid.Equal(other.SrcTypeUuid) {
		return false
	}

	return true
}

func (v VolumeTypesValue) Type(ctx context.Context) attr.Type {
	return VolumeTypesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VolumeTypesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"dst_type_uuid": basetypes.StringType{},
		"src_type_uuid": basetypes.StringType{},
	}
}
